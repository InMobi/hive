/**
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

option java_package = "org.apache.hadoop.hive.llap.daemon.rpc";
option java_outer_classname = "LlapDaemonProtocolProtos";
option java_generic_services = true;
option java_generate_equals_and_hash = true;

// TODO Change this as the interface evolves. Currently using Tez constructs.

message UserPayloadProto {
  optional bytes user_payload = 1;
  optional int32 version = 2;
}

message EntityDescriptorProto {
  optional string class_name = 1;
  optional UserPayloadProto user_payload = 2;
  optional bytes history_text = 3;
}

message IOSpecProto {
  optional string connected_vertex_name = 1;
  optional EntityDescriptorProto io_descriptor = 2;
  optional int32 physical_edge_count = 3;
}

message GroupInputSpecProto {
  optional string group_name = 1;
  repeated string group_vertices = 2;
  optional EntityDescriptorProto merged_input_descriptor = 3;
}

message VertexIdentifier {
  optional string application_id_string = 1;
  optional int32 app_attempt_number = 2;
  optional int32 dag_id = 3;
  optional int32 vertex_id = 4;
}

// The part of SubmitWork that can be signed 
message SignableVertexSpec
{
  optional string user = 1;
  optional int64 signatureKeyId = 2;

  optional VertexIdentifier vertexIdentifier = 3;
  // Display names cannot be modified by the client for now. If needed, they should be sent to HS2 who will put them here.
  optional string dag_name = 4;
  optional string vertex_name = 5;

  // The core vertex stuff 
  optional string token_identifier = 6;
  optional EntityDescriptorProto processor_descriptor = 7;
  repeated IOSpecProto input_specs = 8;
  repeated IOSpecProto output_specs = 9;
  repeated GroupInputSpecProto grouped_input_specs = 10;

  optional int32 vertex_parallelism = 11; // An internal field required for Tez.
}

// Union
message VertexOrBinary {
  optional SignableVertexSpec vertex = 1;
  optional bytes vertexBinary = 2; // SignableVertexSpec
}

message FragmentRuntimeInfo {
  optional int32 num_self_and_upstream_tasks = 1;
  optional int32 num_self_and_upstream_completed_tasks = 2;
  optional int32 within_dag_priority = 3;
  optional int64 dag_start_time = 4;
  optional int64 first_attempt_start_time = 5;
  optional int64 current_attempt_start_time = 6;
}

enum SourceStateProto {
  S_SUCCEEDED = 1;
  S_RUNNING = 2;
}

message QueryIdentifierProto {
  optional string app_identifier = 1;
  optional int32 dag_identifier = 2;
}

message SubmitWorkRequestProto {
  optional VertexOrBinary work_spec = 1;
  optional bytes work_spec_signature = 2;

  optional int32 fragment_number = 3;
  optional int32 attempt_number = 4;

  optional string container_id_string = 5;
  optional string am_host = 6;
  optional int32 am_port = 7;

  // Credentials are not signed - the client can add e.g. his own HDFS tokens.
  optional bytes credentials_binary = 8;

  // Not supported/honored for external clients right now.
  optional FragmentRuntimeInfo fragment_runtime_info = 9;
}


enum SubmissionStateProto {
  ACCEPTED = 1;
  REJECTED = 2;
  EVICTED_OTHER = 3;
}

message SubmitWorkResponseProto {
  optional SubmissionStateProto submission_state = 1;
}

message SourceStateUpdatedRequestProto {
  optional QueryIdentifierProto query_identifier = 1;
  optional string src_name = 2;
  optional SourceStateProto state = 3;
}

message SourceStateUpdatedResponseProto {
}

message QueryCompleteRequestProto {
  optional string query_id = 1;
  optional QueryIdentifierProto query_identifier = 2;
  optional int64 delete_delay = 4 [default = 0];
}

message QueryCompleteResponseProto {
}

message TerminateFragmentRequestProto {
  optional QueryIdentifierProto query_identifier = 1;
  optional string fragment_identifier_string = 2;
}

message TerminateFragmentResponseProto {
}

message GetTokenRequestProto {
  optional string app_id = 1;
}

message GetTokenResponseProto {
  optional bytes token = 1;
}

service LlapDaemonProtocol {
  rpc submitWork(SubmitWorkRequestProto) returns (SubmitWorkResponseProto);
  rpc sourceStateUpdated(SourceStateUpdatedRequestProto) returns (SourceStateUpdatedResponseProto);
  rpc queryComplete(QueryCompleteRequestProto) returns (QueryCompleteResponseProto);
  rpc terminateFragment(TerminateFragmentRequestProto) returns (TerminateFragmentResponseProto);
}

service LlapManagementProtocol {
  rpc getDelegationToken(GetTokenRequestProto) returns (GetTokenResponseProto);
}
