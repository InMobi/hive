PREHOOK: query: USE default
PREHOOK: type: SWITCHDATABASE
POSTHOOK: query: USE default
POSTHOOK: type: SWITCHDATABASE
PREHOOK: query: CREATE TABLE dest1(bytes1 BINARY,
                   bytes2 BINARY)
PREHOOK: type: CREATETABLE
POSTHOOK: query: CREATE TABLE dest1(bytes1 BINARY,
                   bytes2 BINARY)
POSTHOOK: type: CREATETABLE
POSTHOOK: Output: default@dest1
PREHOOK: query: FROM src INSERT OVERWRITE TABLE dest1
SELECT
  CAST(key AS BINARY),
  CAST(value AS BINARY)
ORDER BY value
LIMIT 100
PREHOOK: type: QUERY
PREHOOK: Input: default@src
PREHOOK: Output: default@dest1
POSTHOOK: query: FROM src INSERT OVERWRITE TABLE dest1
SELECT
  CAST(key AS BINARY),
  CAST(value AS BINARY)
ORDER BY value
LIMIT 100
POSTHOOK: type: QUERY
POSTHOOK: Input: default@src
POSTHOOK: Output: default@dest1
POSTHOOK: Lineage: dest1.bytes1 EXPRESSION [(src)src.FieldSchema(name:key, type:string, comment:default), ]
POSTHOOK: Lineage: dest1.bytes2 EXPRESSION [(src)src.FieldSchema(name:value, type:string, comment:default), ]
PREHOOK: query: --Add in a null row for good measure
INSERT INTO TABLE dest1 SELECT NULL, NULL FROM dest1 LIMIT 1
PREHOOK: type: QUERY
PREHOOK: Input: default@dest1
PREHOOK: Output: default@dest1
POSTHOOK: query: --Add in a null row for good measure
INSERT INTO TABLE dest1 SELECT NULL, NULL FROM dest1 LIMIT 1
POSTHOOK: type: QUERY
POSTHOOK: Input: default@dest1
POSTHOOK: Output: default@dest1
POSTHOOK: Lineage: dest1.bytes1 EXPRESSION [(src)src.FieldSchema(name:key, type:string, comment:default), ]
POSTHOOK: Lineage: dest1.bytes1 EXPRESSION []
POSTHOOK: Lineage: dest1.bytes2 EXPRESSION [(src)src.FieldSchema(name:value, type:string, comment:default), ]
POSTHOOK: Lineage: dest1.bytes2 EXPRESSION []
PREHOOK: query: -- this query tests all the udfs provided to work with binary types

SELECT
  bytes1,
  bytes2,
  LENGTH(bytes1),
  CONCAT(bytes1, bytes2),
  SUBSTR(bytes2, 1, 4),
  SUBSTR(bytes2, 3),
  SUBSTR(bytes2, -4, 3)
FROM dest1
ORDER BY bytes2
PREHOOK: type: QUERY
PREHOOK: Input: default@dest1
#### A masked pattern was here ####
POSTHOOK: query: -- this query tests all the udfs provided to work with binary types

SELECT
  bytes1,
  bytes2,
  LENGTH(bytes1),
  CONCAT(bytes1, bytes2),
  SUBSTR(bytes2, 1, 4),
  SUBSTR(bytes2, 3),
  SUBSTR(bytes2, -4, 3)
FROM dest1
ORDER BY bytes2
POSTHOOK: type: QUERY
POSTHOOK: Input: default@dest1
#### A masked pattern was here ####
POSTHOOK: Lineage: dest1.bytes1 EXPRESSION [(src)src.FieldSchema(name:key, type:string, comment:default), ]
POSTHOOK: Lineage: dest1.bytes1 EXPRESSION []
POSTHOOK: Lineage: dest1.bytes2 EXPRESSION [(src)src.FieldSchema(name:value, type:string, comment:default), ]
POSTHOOK: Lineage: dest1.bytes2 EXPRESSION []
NULL	NULL	NULL	NULL	NULL	NULL	NULL
0	val_0	1	0val_0	val_	l_0	al_
0	val_0	1	0val_0	val_	l_0	al_
0	val_0	1	0val_0	val_	l_0	al_
10	val_10	2	10val_10	val_	l_10	l_1
100	val_100	3	100val_100	val_	l_100	_10
100	val_100	3	100val_100	val_	l_100	_10
103	val_103	3	103val_103	val_	l_103	_10
103	val_103	3	103val_103	val_	l_103	_10
104	val_104	3	104val_104	val_	l_104	_10
104	val_104	3	104val_104	val_	l_104	_10
105	val_105	3	105val_105	val_	l_105	_10
11	val_11	2	11val_11	val_	l_11	l_1
111	val_111	3	111val_111	val_	l_111	_11
113	val_113	3	113val_113	val_	l_113	_11
113	val_113	3	113val_113	val_	l_113	_11
114	val_114	3	114val_114	val_	l_114	_11
116	val_116	3	116val_116	val_	l_116	_11
118	val_118	3	118val_118	val_	l_118	_11
118	val_118	3	118val_118	val_	l_118	_11
119	val_119	3	119val_119	val_	l_119	_11
119	val_119	3	119val_119	val_	l_119	_11
119	val_119	3	119val_119	val_	l_119	_11
12	val_12	2	12val_12	val_	l_12	l_1
12	val_12	2	12val_12	val_	l_12	l_1
120	val_120	3	120val_120	val_	l_120	_12
120	val_120	3	120val_120	val_	l_120	_12
125	val_125	3	125val_125	val_	l_125	_12
125	val_125	3	125val_125	val_	l_125	_12
126	val_126	3	126val_126	val_	l_126	_12
128	val_128	3	128val_128	val_	l_128	_12
128	val_128	3	128val_128	val_	l_128	_12
128	val_128	3	128val_128	val_	l_128	_12
129	val_129	3	129val_129	val_	l_129	_12
129	val_129	3	129val_129	val_	l_129	_12
131	val_131	3	131val_131	val_	l_131	_13
133	val_133	3	133val_133	val_	l_133	_13
134	val_134	3	134val_134	val_	l_134	_13
134	val_134	3	134val_134	val_	l_134	_13
136	val_136	3	136val_136	val_	l_136	_13
137	val_137	3	137val_137	val_	l_137	_13
137	val_137	3	137val_137	val_	l_137	_13
138	val_138	3	138val_138	val_	l_138	_13
138	val_138	3	138val_138	val_	l_138	_13
138	val_138	3	138val_138	val_	l_138	_13
138	val_138	3	138val_138	val_	l_138	_13
143	val_143	3	143val_143	val_	l_143	_14
145	val_145	3	145val_145	val_	l_145	_14
146	val_146	3	146val_146	val_	l_146	_14
146	val_146	3	146val_146	val_	l_146	_14
149	val_149	3	149val_149	val_	l_149	_14
149	val_149	3	149val_149	val_	l_149	_14
15	val_15	2	15val_15	val_	l_15	l_1
15	val_15	2	15val_15	val_	l_15	l_1
150	val_150	3	150val_150	val_	l_150	_15
152	val_152	3	152val_152	val_	l_152	_15
152	val_152	3	152val_152	val_	l_152	_15
153	val_153	3	153val_153	val_	l_153	_15
155	val_155	3	155val_155	val_	l_155	_15
156	val_156	3	156val_156	val_	l_156	_15
157	val_157	3	157val_157	val_	l_157	_15
158	val_158	3	158val_158	val_	l_158	_15
160	val_160	3	160val_160	val_	l_160	_16
162	val_162	3	162val_162	val_	l_162	_16
163	val_163	3	163val_163	val_	l_163	_16
164	val_164	3	164val_164	val_	l_164	_16
164	val_164	3	164val_164	val_	l_164	_16
165	val_165	3	165val_165	val_	l_165	_16
165	val_165	3	165val_165	val_	l_165	_16
166	val_166	3	166val_166	val_	l_166	_16
167	val_167	3	167val_167	val_	l_167	_16
167	val_167	3	167val_167	val_	l_167	_16
167	val_167	3	167val_167	val_	l_167	_16
168	val_168	3	168val_168	val_	l_168	_16
169	val_169	3	169val_169	val_	l_169	_16
169	val_169	3	169val_169	val_	l_169	_16
169	val_169	3	169val_169	val_	l_169	_16
169	val_169	3	169val_169	val_	l_169	_16
17	val_17	2	17val_17	val_	l_17	l_1
170	val_170	3	170val_170	val_	l_170	_17
172	val_172	3	172val_172	val_	l_172	_17
172	val_172	3	172val_172	val_	l_172	_17
174	val_174	3	174val_174	val_	l_174	_17
174	val_174	3	174val_174	val_	l_174	_17
175	val_175	3	175val_175	val_	l_175	_17
175	val_175	3	175val_175	val_	l_175	_17
176	val_176	3	176val_176	val_	l_176	_17
176	val_176	3	176val_176	val_	l_176	_17
177	val_177	3	177val_177	val_	l_177	_17
178	val_178	3	178val_178	val_	l_178	_17
179	val_179	3	179val_179	val_	l_179	_17
179	val_179	3	179val_179	val_	l_179	_17
18	val_18	2	18val_18	val_	l_18	l_1
18	val_18	2	18val_18	val_	l_18	l_1
180	val_180	3	180val_180	val_	l_180	_18
181	val_181	3	181val_181	val_	l_181	_18
183	val_183	3	183val_183	val_	l_183	_18
186	val_186	3	186val_186	val_	l_186	_18
187	val_187	3	187val_187	val_	l_187	_18
187	val_187	3	187val_187	val_	l_187	_18
187	val_187	3	187val_187	val_	l_187	_18
