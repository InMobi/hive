PREHOOK: query: -- HIVE-3562 Some limit can be pushed down to map stage

explain
select key,value from src order by key limit 20
PREHOOK: type: QUERY
POSTHOOK: query: -- HIVE-3562 Some limit can be pushed down to map stage

explain
select key,value from src order by key limit 20
POSTHOOK: type: QUERY
STAGE DEPENDENCIES:
  Stage-1 is a root stage
  Stage-0 is a root stage

STAGE PLANS:
  Stage: Stage-1
    Tez
      Edges:
        Reducer 2 <- Map 1 (SIMPLE_EDGE)
#### A masked pattern was here ####
      Vertices:
        Map 1 
            Map Operator Tree:
                TableScan
                  alias: src
                  Statistics: Num rows: 29 Data size: 5812 Basic stats: COMPLETE Column stats: NONE
                  Select Operator
                    expressions: key (type: string), value (type: string)
                    outputColumnNames: _col0, _col1
                    Statistics: Num rows: 29 Data size: 5812 Basic stats: COMPLETE Column stats: NONE
                    Reduce Output Operator
                      key expressions: _col0 (type: string)
                      sort order: +
                      Statistics: Num rows: 29 Data size: 5812 Basic stats: COMPLETE Column stats: NONE
                      TopN Hash Memory Usage: 0.3
                      value expressions: _col0 (type: string), _col1 (type: string)
        Reducer 2 
            Reduce Operator Tree:
              Extract
                Statistics: Num rows: 29 Data size: 5812 Basic stats: COMPLETE Column stats: NONE
                Limit
                  Number of rows: 20
                  Statistics: Num rows: 20 Data size: 4000 Basic stats: COMPLETE Column stats: NONE
                  File Output Operator
                    compressed: false
                    Statistics: Num rows: 20 Data size: 4000 Basic stats: COMPLETE Column stats: NONE
                    table:
                        input format: org.apache.hadoop.mapred.TextInputFormat
                        output format: org.apache.hadoop.hive.ql.io.HiveIgnoreKeyTextOutputFormat
                        serde: org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe

  Stage: Stage-0
    Fetch Operator
      limit: 20

PREHOOK: query: select key,value from src order by key limit 20
PREHOOK: type: QUERY
PREHOOK: Input: default@src
#### A masked pattern was here ####
POSTHOOK: query: select key,value from src order by key limit 20
POSTHOOK: type: QUERY
POSTHOOK: Input: default@src
#### A masked pattern was here ####
0	val_0
0	val_0
0	val_0
10	val_10
100	val_100
100	val_100
103	val_103
103	val_103
104	val_104
104	val_104
105	val_105
11	val_11
111	val_111
113	val_113
113	val_113
114	val_114
116	val_116
118	val_118
118	val_118
119	val_119
PREHOOK: query: explain
select key,value from src order by key desc limit 20
PREHOOK: type: QUERY
POSTHOOK: query: explain
select key,value from src order by key desc limit 20
POSTHOOK: type: QUERY
STAGE DEPENDENCIES:
  Stage-1 is a root stage
  Stage-0 is a root stage

STAGE PLANS:
  Stage: Stage-1
    Tez
      Edges:
        Reducer 2 <- Map 1 (SIMPLE_EDGE)
#### A masked pattern was here ####
      Vertices:
        Map 1 
            Map Operator Tree:
                TableScan
                  alias: src
                  Statistics: Num rows: 29 Data size: 5812 Basic stats: COMPLETE Column stats: NONE
                  Select Operator
                    expressions: key (type: string), value (type: string)
                    outputColumnNames: _col0, _col1
                    Statistics: Num rows: 29 Data size: 5812 Basic stats: COMPLETE Column stats: NONE
                    Reduce Output Operator
                      key expressions: _col0 (type: string)
                      sort order: -
                      Statistics: Num rows: 29 Data size: 5812 Basic stats: COMPLETE Column stats: NONE
                      TopN Hash Memory Usage: 0.3
                      value expressions: _col0 (type: string), _col1 (type: string)
        Reducer 2 
            Reduce Operator Tree:
              Extract
                Statistics: Num rows: 29 Data size: 5812 Basic stats: COMPLETE Column stats: NONE
                Limit
                  Number of rows: 20
                  Statistics: Num rows: 20 Data size: 4000 Basic stats: COMPLETE Column stats: NONE
                  File Output Operator
                    compressed: false
                    Statistics: Num rows: 20 Data size: 4000 Basic stats: COMPLETE Column stats: NONE
                    table:
                        input format: org.apache.hadoop.mapred.TextInputFormat
                        output format: org.apache.hadoop.hive.ql.io.HiveIgnoreKeyTextOutputFormat
                        serde: org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe

  Stage: Stage-0
    Fetch Operator
      limit: 20

PREHOOK: query: select key,value from src order by key desc limit 20
PREHOOK: type: QUERY
PREHOOK: Input: default@src
#### A masked pattern was here ####
POSTHOOK: query: select key,value from src order by key desc limit 20
POSTHOOK: type: QUERY
POSTHOOK: Input: default@src
#### A masked pattern was here ####
98	val_98
98	val_98
97	val_97
97	val_97
96	val_96
95	val_95
95	val_95
92	val_92
90	val_90
90	val_90
90	val_90
9	val_9
87	val_87
86	val_86
85	val_85
84	val_84
84	val_84
83	val_83
83	val_83
82	val_82
PREHOOK: query: explain
select value, sum(key + 1) as sum from src group by value limit 20
PREHOOK: type: QUERY
POSTHOOK: query: explain
select value, sum(key + 1) as sum from src group by value limit 20
POSTHOOK: type: QUERY
STAGE DEPENDENCIES:
  Stage-1 is a root stage
  Stage-0 is a root stage

STAGE PLANS:
  Stage: Stage-1
    Tez
      Edges:
        Reducer 2 <- Map 1 (SIMPLE_EDGE)
#### A masked pattern was here ####
      Vertices:
        Map 1 
            Map Operator Tree:
                TableScan
                  alias: src
                  Statistics: Num rows: 29 Data size: 5812 Basic stats: COMPLETE Column stats: NONE
                  Select Operator
                    expressions: value (type: string), key (type: string)
                    outputColumnNames: value, key
                    Statistics: Num rows: 29 Data size: 5812 Basic stats: COMPLETE Column stats: NONE
                    Group By Operator
                      aggregations: sum((key + 1))
                      keys: value (type: string)
                      mode: hash
                      outputColumnNames: _col0, _col1
                      Statistics: Num rows: 29 Data size: 5812 Basic stats: COMPLETE Column stats: NONE
                      Reduce Output Operator
                        key expressions: _col0 (type: string)
                        sort order: +
                        Map-reduce partition columns: _col0 (type: string)
                        Statistics: Num rows: 29 Data size: 5812 Basic stats: COMPLETE Column stats: NONE
                        TopN Hash Memory Usage: 0.3
                        value expressions: _col1 (type: double)
        Reducer 2 
            Reduce Operator Tree:
              Group By Operator
                aggregations: sum(VALUE._col0)
                keys: KEY._col0 (type: string)
                mode: mergepartial
                outputColumnNames: _col0, _col1
                Statistics: Num rows: 14 Data size: 2805 Basic stats: COMPLETE Column stats: NONE
                Select Operator
                  expressions: _col0 (type: string), _col1 (type: double)
                  outputColumnNames: _col0, _col1
                  Statistics: Num rows: 14 Data size: 2805 Basic stats: COMPLETE Column stats: NONE
                  Limit
                    Number of rows: 20
                    Statistics: Num rows: 14 Data size: 2805 Basic stats: COMPLETE Column stats: NONE
                    File Output Operator
                      compressed: false
                      Statistics: Num rows: 14 Data size: 2805 Basic stats: COMPLETE Column stats: NONE
                      table:
                          input format: org.apache.hadoop.mapred.TextInputFormat
                          output format: org.apache.hadoop.hive.ql.io.HiveIgnoreKeyTextOutputFormat
                          serde: org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe

  Stage: Stage-0
    Fetch Operator
      limit: 20

PREHOOK: query: select value, sum(key + 1) as sum from src group by value limit 20
PREHOOK: type: QUERY
PREHOOK: Input: default@src
#### A masked pattern was here ####
POSTHOOK: query: select value, sum(key + 1) as sum from src group by value limit 20
POSTHOOK: type: QUERY
POSTHOOK: Input: default@src
#### A masked pattern was here ####
val_0	3.0
val_10	11.0
val_100	202.0
val_103	208.0
val_104	210.0
val_105	106.0
val_11	12.0
val_111	112.0
val_113	228.0
val_114	115.0
val_116	117.0
val_118	238.0
val_119	360.0
val_12	26.0
val_120	242.0
val_125	252.0
val_126	127.0
val_128	387.0
val_129	260.0
val_131	132.0
PREHOOK: query: -- deduped RS
explain
select value,avg(key + 1) from src group by value order by value limit 20
PREHOOK: type: QUERY
POSTHOOK: query: -- deduped RS
explain
select value,avg(key + 1) from src group by value order by value limit 20
POSTHOOK: type: QUERY
STAGE DEPENDENCIES:
  Stage-1 is a root stage
  Stage-0 is a root stage

STAGE PLANS:
  Stage: Stage-1
    Tez
      Edges:
        Reducer 2 <- Map 1 (SIMPLE_EDGE)
#### A masked pattern was here ####
      Vertices:
        Map 1 
            Map Operator Tree:
                TableScan
                  alias: src
                  Statistics: Num rows: 29 Data size: 5812 Basic stats: COMPLETE Column stats: NONE
                  Select Operator
                    expressions: value (type: string), key (type: string)
                    outputColumnNames: value, key
                    Statistics: Num rows: 29 Data size: 5812 Basic stats: COMPLETE Column stats: NONE
                    Group By Operator
                      aggregations: avg((key + 1))
                      keys: value (type: string)
                      mode: hash
                      outputColumnNames: _col0, _col1
                      Statistics: Num rows: 29 Data size: 5812 Basic stats: COMPLETE Column stats: NONE
                      Reduce Output Operator
                        key expressions: _col0 (type: string)
                        sort order: +
                        Map-reduce partition columns: _col0 (type: string)
                        Statistics: Num rows: 29 Data size: 5812 Basic stats: COMPLETE Column stats: NONE
                        TopN Hash Memory Usage: 0.3
                        value expressions: _col1 (type: struct<count:bigint,sum:double,input:double>)
        Reducer 2 
            Reduce Operator Tree:
              Group By Operator
                aggregations: avg(VALUE._col0)
                keys: KEY._col0 (type: string)
                mode: mergepartial
                outputColumnNames: _col0, _col1
                Statistics: Num rows: 14 Data size: 2805 Basic stats: COMPLETE Column stats: NONE
                Select Operator
                  expressions: _col0 (type: string), _col1 (type: double)
                  outputColumnNames: _col0, _col1
                  Statistics: Num rows: 14 Data size: 2805 Basic stats: COMPLETE Column stats: NONE
                  Limit
                    Number of rows: 20
                    Statistics: Num rows: 14 Data size: 2805 Basic stats: COMPLETE Column stats: NONE
                    File Output Operator
                      compressed: false
                      Statistics: Num rows: 14 Data size: 2805 Basic stats: COMPLETE Column stats: NONE
                      table:
                          input format: org.apache.hadoop.mapred.TextInputFormat
                          output format: org.apache.hadoop.hive.ql.io.HiveIgnoreKeyTextOutputFormat
                          serde: org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe

  Stage: Stage-0
    Fetch Operator
      limit: 20

PREHOOK: query: select value,avg(key + 1) from src group by value order by value limit 20
PREHOOK: type: QUERY
PREHOOK: Input: default@src
#### A masked pattern was here ####
POSTHOOK: query: select value,avg(key + 1) from src group by value order by value limit 20
POSTHOOK: type: QUERY
POSTHOOK: Input: default@src
#### A masked pattern was here ####
val_0	1.0
val_10	11.0
val_100	101.0
val_103	104.0
val_104	105.0
val_105	106.0
val_11	12.0
val_111	112.0
val_113	114.0
val_114	115.0
val_116	117.0
val_118	119.0
val_119	120.0
val_12	13.0
val_120	121.0
val_125	126.0
val_126	127.0
val_128	129.0
val_129	130.0
val_131	132.0
PREHOOK: query: -- distincts
explain
select distinct(cdouble) from alltypesorc limit 20
PREHOOK: type: QUERY
POSTHOOK: query: -- distincts
explain
select distinct(cdouble) from alltypesorc limit 20
POSTHOOK: type: QUERY
STAGE DEPENDENCIES:
  Stage-1 is a root stage
  Stage-0 is a root stage

STAGE PLANS:
  Stage: Stage-1
    Tez
      Edges:
        Reducer 2 <- Map 1 (SIMPLE_EDGE)
#### A masked pattern was here ####
      Vertices:
        Map 1 
            Map Operator Tree:
                TableScan
                  alias: alltypesorc
                  Statistics: Num rows: 47154 Data size: 377237 Basic stats: COMPLETE Column stats: NONE
                  Select Operator
                    expressions: cdouble (type: double)
                    outputColumnNames: cdouble
                    Statistics: Num rows: 47154 Data size: 377237 Basic stats: COMPLETE Column stats: NONE
                    Group By Operator
                      keys: cdouble (type: double)
                      mode: hash
                      outputColumnNames: _col0
                      Statistics: Num rows: 47154 Data size: 377237 Basic stats: COMPLETE Column stats: NONE
                      Reduce Output Operator
                        key expressions: _col0 (type: double)
                        sort order: +
                        Map-reduce partition columns: _col0 (type: double)
                        Statistics: Num rows: 47154 Data size: 377237 Basic stats: COMPLETE Column stats: NONE
                        TopN Hash Memory Usage: 0.3
        Reducer 2 
            Reduce Operator Tree:
              Group By Operator
                keys: KEY._col0 (type: double)
                mode: mergepartial
                outputColumnNames: _col0
                Statistics: Num rows: 23577 Data size: 188618 Basic stats: COMPLETE Column stats: NONE
                Select Operator
                  expressions: _col0 (type: double)
                  outputColumnNames: _col0
                  Statistics: Num rows: 23577 Data size: 188618 Basic stats: COMPLETE Column stats: NONE
                  Limit
                    Number of rows: 20
                    Statistics: Num rows: 20 Data size: 160 Basic stats: COMPLETE Column stats: NONE
                    File Output Operator
                      compressed: false
                      Statistics: Num rows: 20 Data size: 160 Basic stats: COMPLETE Column stats: NONE
                      table:
                          input format: org.apache.hadoop.mapred.TextInputFormat
                          output format: org.apache.hadoop.hive.ql.io.HiveIgnoreKeyTextOutputFormat
                          serde: org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe

  Stage: Stage-0
    Fetch Operator
      limit: 20

PREHOOK: query: select distinct(cdouble) from alltypesorc limit 20
PREHOOK: type: QUERY
PREHOOK: Input: default@alltypesorc
#### A masked pattern was here ####
POSTHOOK: query: select distinct(cdouble) from alltypesorc limit 20
POSTHOOK: type: QUERY
POSTHOOK: Input: default@alltypesorc
#### A masked pattern was here ####
NULL
-16379.0
-16373.0
-16372.0
-16369.0
-16355.0
-16339.0
-16324.0
-16311.0
-16310.0
-16309.0
-16307.0
-16306.0
-16305.0
-16300.0
-16296.0
-16280.0
-16277.0
-16274.0
-16269.0
PREHOOK: query: explain
select ctinyint, count(distinct(cdouble)) from alltypesorc group by ctinyint limit 20
PREHOOK: type: QUERY
POSTHOOK: query: explain
select ctinyint, count(distinct(cdouble)) from alltypesorc group by ctinyint limit 20
POSTHOOK: type: QUERY
STAGE DEPENDENCIES:
  Stage-1 is a root stage
  Stage-0 is a root stage

STAGE PLANS:
  Stage: Stage-1
    Tez
      Edges:
        Reducer 2 <- Map 1 (SIMPLE_EDGE)
#### A masked pattern was here ####
      Vertices:
        Map 1 
            Map Operator Tree:
                TableScan
                  alias: alltypesorc
                  Statistics: Num rows: 31436 Data size: 377237 Basic stats: COMPLETE Column stats: NONE
                  Select Operator
                    expressions: ctinyint (type: tinyint), cdouble (type: double)
                    outputColumnNames: ctinyint, cdouble
                    Statistics: Num rows: 31436 Data size: 377237 Basic stats: COMPLETE Column stats: NONE
                    Group By Operator
                      aggregations: count(DISTINCT cdouble)
                      keys: ctinyint (type: tinyint), cdouble (type: double)
                      mode: hash
                      outputColumnNames: _col0, _col1, _col2
                      Statistics: Num rows: 31436 Data size: 377237 Basic stats: COMPLETE Column stats: NONE
                      Reduce Output Operator
                        key expressions: _col0 (type: tinyint), _col1 (type: double)
                        sort order: ++
                        Map-reduce partition columns: _col0 (type: tinyint)
                        Statistics: Num rows: 31436 Data size: 377237 Basic stats: COMPLETE Column stats: NONE
                        TopN Hash Memory Usage: 0.3
                        value expressions: _col2 (type: bigint)
        Reducer 2 
            Reduce Operator Tree:
              Group By Operator
                aggregations: count(DISTINCT KEY._col1:0._col0)
                keys: KEY._col0 (type: tinyint)
                mode: mergepartial
                outputColumnNames: _col0, _col1
                Statistics: Num rows: 15718 Data size: 188618 Basic stats: COMPLETE Column stats: NONE
                Select Operator
                  expressions: _col0 (type: tinyint), _col1 (type: bigint)
                  outputColumnNames: _col0, _col1
                  Statistics: Num rows: 15718 Data size: 188618 Basic stats: COMPLETE Column stats: NONE
                  Limit
                    Number of rows: 20
                    Statistics: Num rows: 20 Data size: 240 Basic stats: COMPLETE Column stats: NONE
                    File Output Operator
                      compressed: false
                      Statistics: Num rows: 20 Data size: 240 Basic stats: COMPLETE Column stats: NONE
                      table:
                          input format: org.apache.hadoop.mapred.TextInputFormat
                          output format: org.apache.hadoop.hive.ql.io.HiveIgnoreKeyTextOutputFormat
                          serde: org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe

  Stage: Stage-0
    Fetch Operator
      limit: 20

PREHOOK: query: select ctinyint, count(distinct(cdouble)) from alltypesorc group by ctinyint limit 20
PREHOOK: type: QUERY
PREHOOK: Input: default@alltypesorc
#### A masked pattern was here ####
POSTHOOK: query: select ctinyint, count(distinct(cdouble)) from alltypesorc group by ctinyint limit 20
POSTHOOK: type: QUERY
POSTHOOK: Input: default@alltypesorc
#### A masked pattern was here ####
NULL	2932
-64	24
-63	19
-62	27
-61	25
-60	27
-59	31
-58	23
-57	35
-56	36
-55	29
-54	26
-53	22
-52	33
-51	21
-50	30
-49	26
-48	29
-47	22
-46	24
PREHOOK: query: -- multi distinct
explain
select ctinyint, count(distinct(cstring1)), count(distinct(cstring2)) from alltypesorc group by ctinyint limit 20
PREHOOK: type: QUERY
POSTHOOK: query: -- multi distinct
explain
select ctinyint, count(distinct(cstring1)), count(distinct(cstring2)) from alltypesorc group by ctinyint limit 20
POSTHOOK: type: QUERY
STAGE DEPENDENCIES:
  Stage-1 is a root stage
  Stage-0 is a root stage

STAGE PLANS:
  Stage: Stage-1
    Tez
      Edges:
        Reducer 2 <- Map 1 (SIMPLE_EDGE)
#### A masked pattern was here ####
      Vertices:
        Map 1 
            Map Operator Tree:
                TableScan
                  alias: alltypesorc
                  Statistics: Num rows: 1849 Data size: 377237 Basic stats: COMPLETE Column stats: NONE
                  Select Operator
                    expressions: ctinyint (type: tinyint), cstring1 (type: string), cstring2 (type: string)
                    outputColumnNames: ctinyint, cstring1, cstring2
                    Statistics: Num rows: 1849 Data size: 377237 Basic stats: COMPLETE Column stats: NONE
                    Group By Operator
                      aggregations: count(DISTINCT cstring1), count(DISTINCT cstring2)
                      keys: ctinyint (type: tinyint), cstring1 (type: string), cstring2 (type: string)
                      mode: hash
                      outputColumnNames: _col0, _col1, _col2, _col3, _col4
                      Statistics: Num rows: 1849 Data size: 377237 Basic stats: COMPLETE Column stats: NONE
                      Reduce Output Operator
                        key expressions: _col0 (type: tinyint), _col1 (type: string), _col2 (type: string)
                        sort order: +++
                        Map-reduce partition columns: _col0 (type: tinyint)
                        Statistics: Num rows: 1849 Data size: 377237 Basic stats: COMPLETE Column stats: NONE
                        TopN Hash Memory Usage: 0.3
                        value expressions: _col3 (type: bigint), _col4 (type: bigint)
        Reducer 2 
            Reduce Operator Tree:
              Group By Operator
                aggregations: count(DISTINCT KEY._col1:0._col0), count(DISTINCT KEY._col1:1._col0)
                keys: KEY._col0 (type: tinyint)
                mode: mergepartial
                outputColumnNames: _col0, _col1, _col2
                Statistics: Num rows: 924 Data size: 188516 Basic stats: COMPLETE Column stats: NONE
                Select Operator
                  expressions: _col0 (type: tinyint), _col1 (type: bigint), _col2 (type: bigint)
                  outputColumnNames: _col0, _col1, _col2
                  Statistics: Num rows: 924 Data size: 188516 Basic stats: COMPLETE Column stats: NONE
                  Limit
                    Number of rows: 20
                    Statistics: Num rows: 20 Data size: 4080 Basic stats: COMPLETE Column stats: NONE
                    File Output Operator
                      compressed: false
                      Statistics: Num rows: 20 Data size: 4080 Basic stats: COMPLETE Column stats: NONE
                      table:
                          input format: org.apache.hadoop.mapred.TextInputFormat
                          output format: org.apache.hadoop.hive.ql.io.HiveIgnoreKeyTextOutputFormat
                          serde: org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe

  Stage: Stage-0
    Fetch Operator
      limit: 20

PREHOOK: query: select ctinyint, count(distinct(cstring1)), count(distinct(cstring2)) from alltypesorc group by ctinyint limit 20
PREHOOK: type: QUERY
PREHOOK: Input: default@alltypesorc
#### A masked pattern was here ####
POSTHOOK: query: select ctinyint, count(distinct(cstring1)), count(distinct(cstring2)) from alltypesorc group by ctinyint limit 20
POSTHOOK: type: QUERY
POSTHOOK: Input: default@alltypesorc
#### A masked pattern was here ####
NULL	3065	3
-64	3	13
-63	3	16
-62	3	23
-61	3	25
-60	3	25
-59	3	27
-58	3	24
-57	3	23
-56	3	22
-55	3	21
-54	3	21
-53	3	17
-52	3	21
-51	1012	1045
-50	3	25
-49	3	24
-48	3	27
-47	3	23
-46	3	19
PREHOOK: query: -- limit zero
explain
select key,value from src order by key limit 0
PREHOOK: type: QUERY
POSTHOOK: query: -- limit zero
explain
select key,value from src order by key limit 0
POSTHOOK: type: QUERY
STAGE DEPENDENCIES:
  Stage-1 is a root stage
  Stage-0 is a root stage

STAGE PLANS:
  Stage: Stage-1
    Tez
      Edges:
        Reducer 2 <- Map 1 (SIMPLE_EDGE)
#### A masked pattern was here ####
      Vertices:
        Map 1 
            Map Operator Tree:
                TableScan
                  alias: src
                  Statistics: Num rows: 29 Data size: 5812 Basic stats: COMPLETE Column stats: NONE
                  Select Operator
                    expressions: key (type: string), value (type: string)
                    outputColumnNames: _col0, _col1
                    Statistics: Num rows: 29 Data size: 5812 Basic stats: COMPLETE Column stats: NONE
                    Reduce Output Operator
                      key expressions: _col0 (type: string)
                      sort order: +
                      Statistics: Num rows: 29 Data size: 5812 Basic stats: COMPLETE Column stats: NONE
                      value expressions: _col0 (type: string), _col1 (type: string)
        Reducer 2 
            Reduce Operator Tree:
              Extract
                Statistics: Num rows: 29 Data size: 5812 Basic stats: COMPLETE Column stats: NONE
                Limit
                  Number of rows: 0
                  Statistics: Num rows: 0 Data size: 0 Basic stats: NONE Column stats: NONE
                  File Output Operator
                    compressed: false
                    Statistics: Num rows: 0 Data size: 0 Basic stats: NONE Column stats: NONE
                    table:
                        input format: org.apache.hadoop.mapred.TextInputFormat
                        output format: org.apache.hadoop.hive.ql.io.HiveIgnoreKeyTextOutputFormat
                        serde: org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe

  Stage: Stage-0
    Fetch Operator
      limit: 0

PREHOOK: query: select key,value from src order by key limit 0
PREHOOK: type: QUERY
PREHOOK: Input: default@src
#### A masked pattern was here ####
POSTHOOK: query: select key,value from src order by key limit 0
POSTHOOK: type: QUERY
POSTHOOK: Input: default@src
#### A masked pattern was here ####
PREHOOK: query: -- 2MR (applied to last RS)
explain
select value, sum(key) as sum from src group by value order by sum limit 20
PREHOOK: type: QUERY
POSTHOOK: query: -- 2MR (applied to last RS)
explain
select value, sum(key) as sum from src group by value order by sum limit 20
POSTHOOK: type: QUERY
STAGE DEPENDENCIES:
  Stage-1 is a root stage
  Stage-0 is a root stage

STAGE PLANS:
  Stage: Stage-1
    Tez
      Edges:
        Reducer 2 <- Map 1 (SIMPLE_EDGE)
        Reducer 3 <- Reducer 2 (SIMPLE_EDGE)
#### A masked pattern was here ####
      Vertices:
        Map 1 
            Map Operator Tree:
                TableScan
                  alias: src
                  Statistics: Num rows: 29 Data size: 5812 Basic stats: COMPLETE Column stats: NONE
                  Select Operator
                    expressions: value (type: string), key (type: string)
                    outputColumnNames: value, key
                    Statistics: Num rows: 29 Data size: 5812 Basic stats: COMPLETE Column stats: NONE
                    Group By Operator
                      aggregations: sum(key)
                      keys: value (type: string)
                      mode: hash
                      outputColumnNames: _col0, _col1
                      Statistics: Num rows: 29 Data size: 5812 Basic stats: COMPLETE Column stats: NONE
                      Reduce Output Operator
                        key expressions: _col0 (type: string)
                        sort order: +
                        Map-reduce partition columns: _col0 (type: string)
                        Statistics: Num rows: 29 Data size: 5812 Basic stats: COMPLETE Column stats: NONE
                        value expressions: _col1 (type: double)
        Reducer 2 
            Reduce Operator Tree:
              Group By Operator
                aggregations: sum(VALUE._col0)
                keys: KEY._col0 (type: string)
                mode: mergepartial
                outputColumnNames: _col0, _col1
                Statistics: Num rows: 14 Data size: 2805 Basic stats: COMPLETE Column stats: NONE
                Select Operator
                  expressions: _col0 (type: string), _col1 (type: double)
                  outputColumnNames: _col0, _col1
                  Statistics: Num rows: 14 Data size: 2805 Basic stats: COMPLETE Column stats: NONE
                  Reduce Output Operator
                    key expressions: _col1 (type: double)
                    sort order: +
                    Statistics: Num rows: 14 Data size: 2805 Basic stats: COMPLETE Column stats: NONE
                    TopN Hash Memory Usage: 0.3
                    value expressions: _col0 (type: string), _col1 (type: double)
        Reducer 3 
            Reduce Operator Tree:
              Extract
                Statistics: Num rows: 14 Data size: 2805 Basic stats: COMPLETE Column stats: NONE
                Limit
                  Number of rows: 20
                  Statistics: Num rows: 14 Data size: 2805 Basic stats: COMPLETE Column stats: NONE
                  File Output Operator
                    compressed: false
                    Statistics: Num rows: 14 Data size: 2805 Basic stats: COMPLETE Column stats: NONE
                    table:
                        input format: org.apache.hadoop.mapred.TextInputFormat
                        output format: org.apache.hadoop.hive.ql.io.HiveIgnoreKeyTextOutputFormat
                        serde: org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe

  Stage: Stage-0
    Fetch Operator
      limit: 20

PREHOOK: query: select value, sum(key) as sum from src group by value order by sum limit 20
PREHOOK: type: QUERY
PREHOOK: Input: default@src
#### A masked pattern was here ####
POSTHOOK: query: select value, sum(key) as sum from src group by value order by sum limit 20
POSTHOOK: type: QUERY
POSTHOOK: Input: default@src
#### A masked pattern was here ####
val_0	0.0
val_2	2.0
val_4	4.0
val_8	8.0
val_9	9.0
val_10	10.0
val_11	11.0
val_5	15.0
val_17	17.0
val_19	19.0
val_20	20.0
val_12	24.0
val_27	27.0
val_28	28.0
val_30	30.0
val_15	30.0
val_33	33.0
val_34	34.0
val_18	36.0
val_41	41.0
PREHOOK: query: -- subqueries
explain
select * from
(select key, count(1) from src group by key order by key limit 2) subq
join
(select key, count(1) from src group by key limit 3) subq2
on subq.key=subq2.key limit 4
PREHOOK: type: QUERY
POSTHOOK: query: -- subqueries
explain
select * from
(select key, count(1) from src group by key order by key limit 2) subq
join
(select key, count(1) from src group by key limit 3) subq2
on subq.key=subq2.key limit 4
POSTHOOK: type: QUERY
STAGE DEPENDENCIES:
  Stage-1 is a root stage
  Stage-0 is a root stage

STAGE PLANS:
  Stage: Stage-1
    Tez
      Edges:
        Reducer 2 <- Map 1 (SIMPLE_EDGE)
        Reducer 3 <- Reducer 2 (SIMPLE_EDGE), Reducer 6 (SIMPLE_EDGE)
        Reducer 5 <- Map 4 (SIMPLE_EDGE)
        Reducer 6 <- Reducer 5 (SIMPLE_EDGE)
#### A masked pattern was here ####
      Vertices:
        Map 1 
            Map Operator Tree:
                TableScan
                  alias: src
                  Statistics: Num rows: 58 Data size: 5812 Basic stats: COMPLETE Column stats: NONE
                  Select Operator
                    expressions: key (type: string)
                    outputColumnNames: key
                    Statistics: Num rows: 58 Data size: 5812 Basic stats: COMPLETE Column stats: NONE
                    Group By Operator
                      aggregations: count(1)
                      keys: key (type: string)
                      mode: hash
                      outputColumnNames: _col0, _col1
                      Statistics: Num rows: 58 Data size: 5812 Basic stats: COMPLETE Column stats: NONE
                      Reduce Output Operator
                        key expressions: _col0 (type: string)
                        sort order: +
                        Map-reduce partition columns: _col0 (type: string)
                        Statistics: Num rows: 58 Data size: 5812 Basic stats: COMPLETE Column stats: NONE
                        TopN Hash Memory Usage: 0.3
                        value expressions: _col1 (type: bigint)
        Map 4 
            Map Operator Tree:
                TableScan
                  alias: src
                  Statistics: Num rows: 58 Data size: 5812 Basic stats: COMPLETE Column stats: NONE
                  Select Operator
                    expressions: key (type: string)
                    outputColumnNames: key
                    Statistics: Num rows: 58 Data size: 5812 Basic stats: COMPLETE Column stats: NONE
                    Group By Operator
                      aggregations: count(1)
                      keys: key (type: string)
                      mode: hash
                      outputColumnNames: _col0, _col1
                      Statistics: Num rows: 58 Data size: 5812 Basic stats: COMPLETE Column stats: NONE
                      Reduce Output Operator
                        key expressions: _col0 (type: string)
                        sort order: +
                        Map-reduce partition columns: _col0 (type: string)
                        Statistics: Num rows: 58 Data size: 5812 Basic stats: COMPLETE Column stats: NONE
                        TopN Hash Memory Usage: 0.3
                        value expressions: _col1 (type: bigint)
        Reducer 2 
            Reduce Operator Tree:
              Group By Operator
                aggregations: count(VALUE._col0)
                keys: KEY._col0 (type: string)
                mode: mergepartial
                outputColumnNames: _col0, _col1
                Statistics: Num rows: 29 Data size: 2906 Basic stats: COMPLETE Column stats: NONE
                Select Operator
                  expressions: _col0 (type: string), _col1 (type: bigint)
                  outputColumnNames: _col0, _col1
                  Statistics: Num rows: 29 Data size: 2906 Basic stats: COMPLETE Column stats: NONE
                  Limit
                    Number of rows: 2
                    Statistics: Num rows: 2 Data size: 200 Basic stats: COMPLETE Column stats: NONE
                    Reduce Output Operator
                      key expressions: _col0 (type: string)
                      sort order: +
                      Map-reduce partition columns: _col0 (type: string)
                      Statistics: Num rows: 2 Data size: 200 Basic stats: COMPLETE Column stats: NONE
                      value expressions: _col0 (type: string), _col1 (type: bigint)
        Reducer 3 
            Reduce Operator Tree:
              Join Operator
                condition map:
                     Inner Join 0 to 1
                condition expressions:
                  0 {VALUE._col0} {VALUE._col1}
                  1 {VALUE._col0} {VALUE._col1}
                outputColumnNames: _col0, _col1, _col2, _col3
                Statistics: Num rows: 3 Data size: 330 Basic stats: COMPLETE Column stats: NONE
                Select Operator
                  expressions: _col0 (type: string), _col1 (type: bigint), _col2 (type: string), _col3 (type: bigint)
                  outputColumnNames: _col0, _col1, _col2, _col3
                  Statistics: Num rows: 3 Data size: 330 Basic stats: COMPLETE Column stats: NONE
                  Limit
                    Number of rows: 4
                    Statistics: Num rows: 3 Data size: 330 Basic stats: COMPLETE Column stats: NONE
                    File Output Operator
                      compressed: false
                      Statistics: Num rows: 3 Data size: 330 Basic stats: COMPLETE Column stats: NONE
                      table:
                          input format: org.apache.hadoop.mapred.TextInputFormat
                          output format: org.apache.hadoop.hive.ql.io.HiveIgnoreKeyTextOutputFormat
                          serde: org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe
        Reducer 5 
            Reduce Operator Tree:
              Group By Operator
                aggregations: count(VALUE._col0)
                keys: KEY._col0 (type: string)
                mode: mergepartial
                outputColumnNames: _col0, _col1
                Statistics: Num rows: 29 Data size: 2906 Basic stats: COMPLETE Column stats: NONE
                Select Operator
                  expressions: _col0 (type: string), _col1 (type: bigint)
                  outputColumnNames: _col0, _col1
                  Statistics: Num rows: 29 Data size: 2906 Basic stats: COMPLETE Column stats: NONE
                  Limit
                    Number of rows: 3
                    Statistics: Num rows: 3 Data size: 300 Basic stats: COMPLETE Column stats: NONE
                    Reduce Output Operator
                      sort order: 
                      Statistics: Num rows: 3 Data size: 300 Basic stats: COMPLETE Column stats: NONE
                      TopN Hash Memory Usage: 0.3
                      value expressions: _col0 (type: string), _col1 (type: bigint)
        Reducer 6 
            Reduce Operator Tree:
              Extract
                Statistics: Num rows: 3 Data size: 300 Basic stats: COMPLETE Column stats: NONE
                Limit
                  Number of rows: 3
                  Statistics: Num rows: 3 Data size: 300 Basic stats: COMPLETE Column stats: NONE
                  Reduce Output Operator
                    key expressions: _col0 (type: string)
                    sort order: +
                    Map-reduce partition columns: _col0 (type: string)
                    Statistics: Num rows: 3 Data size: 300 Basic stats: COMPLETE Column stats: NONE
                    value expressions: _col0 (type: string), _col1 (type: bigint)

  Stage: Stage-0
    Fetch Operator
      limit: 4

PREHOOK: query: -- map aggregation disabled
explain
select value, sum(key) as sum from src group by value limit 20
PREHOOK: type: QUERY
POSTHOOK: query: -- map aggregation disabled
explain
select value, sum(key) as sum from src group by value limit 20
POSTHOOK: type: QUERY
STAGE DEPENDENCIES:
  Stage-1 is a root stage
  Stage-0 is a root stage

STAGE PLANS:
  Stage: Stage-1
    Tez
      Edges:
        Reducer 2 <- Map 1 (SIMPLE_EDGE)
#### A masked pattern was here ####
      Vertices:
        Map 1 
            Map Operator Tree:
                TableScan
                  alias: src
                  Statistics: Num rows: 29 Data size: 5812 Basic stats: COMPLETE Column stats: NONE
                  Select Operator
                    expressions: value (type: string), key (type: string)
                    outputColumnNames: value, key
                    Statistics: Num rows: 29 Data size: 5812 Basic stats: COMPLETE Column stats: NONE
                    Reduce Output Operator
                      key expressions: value (type: string)
                      sort order: +
                      Map-reduce partition columns: value (type: string)
                      Statistics: Num rows: 29 Data size: 5812 Basic stats: COMPLETE Column stats: NONE
                      TopN Hash Memory Usage: 0.3
                      value expressions: key (type: string)
        Reducer 2 
            Reduce Operator Tree:
              Group By Operator
                aggregations: sum(VALUE._col0)
                keys: KEY._col0 (type: string)
                mode: complete
                outputColumnNames: _col0, _col1
                Statistics: Num rows: 14 Data size: 2805 Basic stats: COMPLETE Column stats: NONE
                Select Operator
                  expressions: _col0 (type: string), _col1 (type: double)
                  outputColumnNames: _col0, _col1
                  Statistics: Num rows: 14 Data size: 2805 Basic stats: COMPLETE Column stats: NONE
                  Limit
                    Number of rows: 20
                    Statistics: Num rows: 14 Data size: 2805 Basic stats: COMPLETE Column stats: NONE
                    File Output Operator
                      compressed: false
                      Statistics: Num rows: 14 Data size: 2805 Basic stats: COMPLETE Column stats: NONE
                      table:
                          input format: org.apache.hadoop.mapred.TextInputFormat
                          output format: org.apache.hadoop.hive.ql.io.HiveIgnoreKeyTextOutputFormat
                          serde: org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe

  Stage: Stage-0
    Fetch Operator
      limit: 20

PREHOOK: query: select value, sum(key) as sum from src group by value limit 20
PREHOOK: type: QUERY
PREHOOK: Input: default@src
#### A masked pattern was here ####
POSTHOOK: query: select value, sum(key) as sum from src group by value limit 20
POSTHOOK: type: QUERY
POSTHOOK: Input: default@src
#### A masked pattern was here ####
val_0	0.0
val_10	10.0
val_100	200.0
val_103	206.0
val_104	208.0
val_105	105.0
val_11	11.0
val_111	111.0
val_113	226.0
val_114	114.0
val_116	116.0
val_118	236.0
val_119	357.0
val_12	24.0
val_120	240.0
val_125	250.0
val_126	126.0
val_128	384.0
val_129	258.0
val_131	131.0
PREHOOK: query: -- flush for order-by
explain
select key,value,value,value,value,value,value,value,value from src order by key limit 100
PREHOOK: type: QUERY
POSTHOOK: query: -- flush for order-by
explain
select key,value,value,value,value,value,value,value,value from src order by key limit 100
POSTHOOK: type: QUERY
STAGE DEPENDENCIES:
  Stage-1 is a root stage
  Stage-0 is a root stage

STAGE PLANS:
  Stage: Stage-1
    Tez
      Edges:
        Reducer 2 <- Map 1 (SIMPLE_EDGE)
#### A masked pattern was here ####
      Vertices:
        Map 1 
            Map Operator Tree:
                TableScan
                  alias: src
                  Statistics: Num rows: 29 Data size: 5812 Basic stats: COMPLETE Column stats: NONE
                  Select Operator
                    expressions: key (type: string), value (type: string), value (type: string), value (type: string), value (type: string), value (type: string), value (type: string), value (type: string), value (type: string)
                    outputColumnNames: _col0, _col1, _col2, _col3, _col4, _col5, _col6, _col7, _col8
                    Statistics: Num rows: 29 Data size: 5812 Basic stats: COMPLETE Column stats: NONE
                    Reduce Output Operator
                      key expressions: _col0 (type: string)
                      sort order: +
                      Statistics: Num rows: 29 Data size: 5812 Basic stats: COMPLETE Column stats: NONE
                      TopN Hash Memory Usage: 2.0E-5
                      value expressions: _col0 (type: string), _col1 (type: string), _col2 (type: string), _col3 (type: string), _col4 (type: string), _col5 (type: string), _col6 (type: string), _col7 (type: string), _col8 (type: string)
        Reducer 2 
            Reduce Operator Tree:
              Extract
                Statistics: Num rows: 29 Data size: 5812 Basic stats: COMPLETE Column stats: NONE
                Limit
                  Number of rows: 100
                  Statistics: Num rows: 29 Data size: 5812 Basic stats: COMPLETE Column stats: NONE
                  File Output Operator
                    compressed: false
                    Statistics: Num rows: 29 Data size: 5812 Basic stats: COMPLETE Column stats: NONE
                    table:
                        input format: org.apache.hadoop.mapred.TextInputFormat
                        output format: org.apache.hadoop.hive.ql.io.HiveIgnoreKeyTextOutputFormat
                        serde: org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe

  Stage: Stage-0
    Fetch Operator
      limit: 100

PREHOOK: query: select key,value,value,value,value,value,value,value,value from src order by key limit 100
PREHOOK: type: QUERY
PREHOOK: Input: default@src
#### A masked pattern was here ####
POSTHOOK: query: select key,value,value,value,value,value,value,value,value from src order by key limit 100
POSTHOOK: type: QUERY
POSTHOOK: Input: default@src
#### A masked pattern was here ####
0	val_0	val_0	val_0	val_0	val_0	val_0	val_0	val_0
0	val_0	val_0	val_0	val_0	val_0	val_0	val_0	val_0
0	val_0	val_0	val_0	val_0	val_0	val_0	val_0	val_0
10	val_10	val_10	val_10	val_10	val_10	val_10	val_10	val_10
100	val_100	val_100	val_100	val_100	val_100	val_100	val_100	val_100
100	val_100	val_100	val_100	val_100	val_100	val_100	val_100	val_100
103	val_103	val_103	val_103	val_103	val_103	val_103	val_103	val_103
103	val_103	val_103	val_103	val_103	val_103	val_103	val_103	val_103
104	val_104	val_104	val_104	val_104	val_104	val_104	val_104	val_104
104	val_104	val_104	val_104	val_104	val_104	val_104	val_104	val_104
105	val_105	val_105	val_105	val_105	val_105	val_105	val_105	val_105
11	val_11	val_11	val_11	val_11	val_11	val_11	val_11	val_11
111	val_111	val_111	val_111	val_111	val_111	val_111	val_111	val_111
113	val_113	val_113	val_113	val_113	val_113	val_113	val_113	val_113
113	val_113	val_113	val_113	val_113	val_113	val_113	val_113	val_113
114	val_114	val_114	val_114	val_114	val_114	val_114	val_114	val_114
116	val_116	val_116	val_116	val_116	val_116	val_116	val_116	val_116
118	val_118	val_118	val_118	val_118	val_118	val_118	val_118	val_118
118	val_118	val_118	val_118	val_118	val_118	val_118	val_118	val_118
119	val_119	val_119	val_119	val_119	val_119	val_119	val_119	val_119
119	val_119	val_119	val_119	val_119	val_119	val_119	val_119	val_119
119	val_119	val_119	val_119	val_119	val_119	val_119	val_119	val_119
12	val_12	val_12	val_12	val_12	val_12	val_12	val_12	val_12
12	val_12	val_12	val_12	val_12	val_12	val_12	val_12	val_12
120	val_120	val_120	val_120	val_120	val_120	val_120	val_120	val_120
120	val_120	val_120	val_120	val_120	val_120	val_120	val_120	val_120
125	val_125	val_125	val_125	val_125	val_125	val_125	val_125	val_125
125	val_125	val_125	val_125	val_125	val_125	val_125	val_125	val_125
126	val_126	val_126	val_126	val_126	val_126	val_126	val_126	val_126
128	val_128	val_128	val_128	val_128	val_128	val_128	val_128	val_128
128	val_128	val_128	val_128	val_128	val_128	val_128	val_128	val_128
128	val_128	val_128	val_128	val_128	val_128	val_128	val_128	val_128
129	val_129	val_129	val_129	val_129	val_129	val_129	val_129	val_129
129	val_129	val_129	val_129	val_129	val_129	val_129	val_129	val_129
131	val_131	val_131	val_131	val_131	val_131	val_131	val_131	val_131
133	val_133	val_133	val_133	val_133	val_133	val_133	val_133	val_133
134	val_134	val_134	val_134	val_134	val_134	val_134	val_134	val_134
134	val_134	val_134	val_134	val_134	val_134	val_134	val_134	val_134
136	val_136	val_136	val_136	val_136	val_136	val_136	val_136	val_136
137	val_137	val_137	val_137	val_137	val_137	val_137	val_137	val_137
137	val_137	val_137	val_137	val_137	val_137	val_137	val_137	val_137
138	val_138	val_138	val_138	val_138	val_138	val_138	val_138	val_138
138	val_138	val_138	val_138	val_138	val_138	val_138	val_138	val_138
138	val_138	val_138	val_138	val_138	val_138	val_138	val_138	val_138
138	val_138	val_138	val_138	val_138	val_138	val_138	val_138	val_138
143	val_143	val_143	val_143	val_143	val_143	val_143	val_143	val_143
145	val_145	val_145	val_145	val_145	val_145	val_145	val_145	val_145
146	val_146	val_146	val_146	val_146	val_146	val_146	val_146	val_146
146	val_146	val_146	val_146	val_146	val_146	val_146	val_146	val_146
149	val_149	val_149	val_149	val_149	val_149	val_149	val_149	val_149
149	val_149	val_149	val_149	val_149	val_149	val_149	val_149	val_149
15	val_15	val_15	val_15	val_15	val_15	val_15	val_15	val_15
15	val_15	val_15	val_15	val_15	val_15	val_15	val_15	val_15
150	val_150	val_150	val_150	val_150	val_150	val_150	val_150	val_150
152	val_152	val_152	val_152	val_152	val_152	val_152	val_152	val_152
152	val_152	val_152	val_152	val_152	val_152	val_152	val_152	val_152
153	val_153	val_153	val_153	val_153	val_153	val_153	val_153	val_153
155	val_155	val_155	val_155	val_155	val_155	val_155	val_155	val_155
156	val_156	val_156	val_156	val_156	val_156	val_156	val_156	val_156
157	val_157	val_157	val_157	val_157	val_157	val_157	val_157	val_157
158	val_158	val_158	val_158	val_158	val_158	val_158	val_158	val_158
160	val_160	val_160	val_160	val_160	val_160	val_160	val_160	val_160
162	val_162	val_162	val_162	val_162	val_162	val_162	val_162	val_162
163	val_163	val_163	val_163	val_163	val_163	val_163	val_163	val_163
164	val_164	val_164	val_164	val_164	val_164	val_164	val_164	val_164
164	val_164	val_164	val_164	val_164	val_164	val_164	val_164	val_164
165	val_165	val_165	val_165	val_165	val_165	val_165	val_165	val_165
165	val_165	val_165	val_165	val_165	val_165	val_165	val_165	val_165
166	val_166	val_166	val_166	val_166	val_166	val_166	val_166	val_166
167	val_167	val_167	val_167	val_167	val_167	val_167	val_167	val_167
167	val_167	val_167	val_167	val_167	val_167	val_167	val_167	val_167
167	val_167	val_167	val_167	val_167	val_167	val_167	val_167	val_167
168	val_168	val_168	val_168	val_168	val_168	val_168	val_168	val_168
169	val_169	val_169	val_169	val_169	val_169	val_169	val_169	val_169
169	val_169	val_169	val_169	val_169	val_169	val_169	val_169	val_169
169	val_169	val_169	val_169	val_169	val_169	val_169	val_169	val_169
169	val_169	val_169	val_169	val_169	val_169	val_169	val_169	val_169
17	val_17	val_17	val_17	val_17	val_17	val_17	val_17	val_17
170	val_170	val_170	val_170	val_170	val_170	val_170	val_170	val_170
172	val_172	val_172	val_172	val_172	val_172	val_172	val_172	val_172
172	val_172	val_172	val_172	val_172	val_172	val_172	val_172	val_172
174	val_174	val_174	val_174	val_174	val_174	val_174	val_174	val_174
174	val_174	val_174	val_174	val_174	val_174	val_174	val_174	val_174
175	val_175	val_175	val_175	val_175	val_175	val_175	val_175	val_175
175	val_175	val_175	val_175	val_175	val_175	val_175	val_175	val_175
176	val_176	val_176	val_176	val_176	val_176	val_176	val_176	val_176
176	val_176	val_176	val_176	val_176	val_176	val_176	val_176	val_176
177	val_177	val_177	val_177	val_177	val_177	val_177	val_177	val_177
178	val_178	val_178	val_178	val_178	val_178	val_178	val_178	val_178
179	val_179	val_179	val_179	val_179	val_179	val_179	val_179	val_179
179	val_179	val_179	val_179	val_179	val_179	val_179	val_179	val_179
18	val_18	val_18	val_18	val_18	val_18	val_18	val_18	val_18
18	val_18	val_18	val_18	val_18	val_18	val_18	val_18	val_18
180	val_180	val_180	val_180	val_180	val_180	val_180	val_180	val_180
181	val_181	val_181	val_181	val_181	val_181	val_181	val_181	val_181
183	val_183	val_183	val_183	val_183	val_183	val_183	val_183	val_183
186	val_186	val_186	val_186	val_186	val_186	val_186	val_186	val_186
187	val_187	val_187	val_187	val_187	val_187	val_187	val_187	val_187
187	val_187	val_187	val_187	val_187	val_187	val_187	val_187	val_187
187	val_187	val_187	val_187	val_187	val_187	val_187	val_187	val_187
PREHOOK: query: -- flush for group-by
explain
select sum(key) as sum from src group by concat(key,value,value,value,value,value,value,value,value,value) limit 100
PREHOOK: type: QUERY
POSTHOOK: query: -- flush for group-by
explain
select sum(key) as sum from src group by concat(key,value,value,value,value,value,value,value,value,value) limit 100
POSTHOOK: type: QUERY
STAGE DEPENDENCIES:
  Stage-1 is a root stage
  Stage-0 is a root stage

STAGE PLANS:
  Stage: Stage-1
    Tez
      Edges:
        Reducer 2 <- Map 1 (SIMPLE_EDGE)
#### A masked pattern was here ####
      Vertices:
        Map 1 
            Map Operator Tree:
                TableScan
                  alias: src
                  Statistics: Num rows: 29 Data size: 5812 Basic stats: COMPLETE Column stats: NONE
                  Select Operator
                    expressions: key (type: string), value (type: string)
                    outputColumnNames: key, value
                    Statistics: Num rows: 29 Data size: 5812 Basic stats: COMPLETE Column stats: NONE
                    Reduce Output Operator
                      key expressions: concat(key, value, value, value, value, value, value, value, value, value) (type: string)
                      sort order: +
                      Map-reduce partition columns: concat(key, value, value, value, value, value, value, value, value, value) (type: string)
                      Statistics: Num rows: 29 Data size: 5812 Basic stats: COMPLETE Column stats: NONE
                      TopN Hash Memory Usage: 2.0E-5
                      value expressions: key (type: string)
        Reducer 2 
            Reduce Operator Tree:
              Group By Operator
                aggregations: sum(VALUE._col0)
                keys: KEY._col0 (type: string)
                mode: complete
                outputColumnNames: _col0, _col1
                Statistics: Num rows: 14 Data size: 2805 Basic stats: COMPLETE Column stats: NONE
                Select Operator
                  expressions: _col1 (type: double)
                  outputColumnNames: _col0
                  Statistics: Num rows: 14 Data size: 2805 Basic stats: COMPLETE Column stats: NONE
                  Limit
                    Number of rows: 100
                    Statistics: Num rows: 14 Data size: 2805 Basic stats: COMPLETE Column stats: NONE
                    File Output Operator
                      compressed: false
                      Statistics: Num rows: 14 Data size: 2805 Basic stats: COMPLETE Column stats: NONE
                      table:
                          input format: org.apache.hadoop.mapred.TextInputFormat
                          output format: org.apache.hadoop.hive.ql.io.HiveIgnoreKeyTextOutputFormat
                          serde: org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe

  Stage: Stage-0
    Fetch Operator
      limit: 100

PREHOOK: query: select sum(key) as sum from src group by concat(key,value,value,value,value,value,value,value,value,value) limit 100
PREHOOK: type: QUERY
PREHOOK: Input: default@src
#### A masked pattern was here ####
POSTHOOK: query: select sum(key) as sum from src group by concat(key,value,value,value,value,value,value,value,value,value) limit 100
POSTHOOK: type: QUERY
POSTHOOK: Input: default@src
#### A masked pattern was here ####
0.0
200.0
206.0
208.0
105.0
10.0
111.0
226.0
114.0
116.0
236.0
357.0
11.0
240.0
250.0
126.0
384.0
258.0
24.0
131.0
133.0
268.0
136.0
274.0
552.0
143.0
145.0
292.0
298.0
150.0
304.0
153.0
155.0
156.0
157.0
158.0
30.0
160.0
162.0
163.0
328.0
330.0
166.0
501.0
168.0
676.0
170.0
344.0
348.0
350.0
352.0
177.0
178.0
358.0
17.0
180.0
181.0
183.0
186.0
561.0
189.0
36.0
190.0
382.0
192.0
579.0
194.0
390.0
196.0
394.0
597.0
19.0
400.0
201.0
202.0
406.0
410.0
414.0
624.0
418.0
20.0
426.0
214.0
432.0
434.0
218.0
438.0
442.0
222.0
446.0
448.0
226.0
228.0
458.0
1150.0
466.0
235.0
474.0
476.0
478.0
