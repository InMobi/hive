PREHOOK: query: EXPLAIN
SELECT src1.key as k1, src1.value as v1, 
       src2.key as k2, src2.value as v2 FROM 
  (SELECT * FROM src WHERE src.key < 10) src1 
    JOIN 
  (SELECT * FROM src WHERE src.key < 10) src2
  SORT BY k1, v1, k2, v2
PREHOOK: type: QUERY
POSTHOOK: query: EXPLAIN
SELECT src1.key as k1, src1.value as v1, 
       src2.key as k2, src2.value as v2 FROM 
  (SELECT * FROM src WHERE src.key < 10) src1 
    JOIN 
  (SELECT * FROM src WHERE src.key < 10) src2
  SORT BY k1, v1, k2, v2
POSTHOOK: type: QUERY
STAGE DEPENDENCIES:
  Stage-1 is a root stage
  Stage-0 is a root stage

STAGE PLANS:
  Stage: Stage-1
    Tez
      Edges:
        Reducer 2 <- Map 1 (SIMPLE_EDGE), Map 4 (SIMPLE_EDGE)
        Reducer 3 <- Reducer 2 (SIMPLE_EDGE)
#### A masked pattern was here ####
      Vertices:
        Map 1 
            Map Operator Tree:
                TableScan
                  alias: src
                  Statistics: Num rows: 29 Data size: 5812 Basic stats: COMPLETE Column stats: NONE
                  Filter Operator
                    predicate: (key < 10) (type: boolean)
                    Statistics: Num rows: 9 Data size: 1803 Basic stats: COMPLETE Column stats: NONE
                    Select Operator
                      expressions: key (type: string), value (type: string)
                      outputColumnNames: _col0, _col1
                      Statistics: Num rows: 9 Data size: 1803 Basic stats: COMPLETE Column stats: NONE
                      Reduce Output Operator
                        sort order: 
                        Statistics: Num rows: 9 Data size: 1803 Basic stats: COMPLETE Column stats: NONE
                        value expressions: _col0 (type: string), _col1 (type: string)
        Map 4 
            Map Operator Tree:
                TableScan
                  alias: src
                  Statistics: Num rows: 29 Data size: 5812 Basic stats: COMPLETE Column stats: NONE
                  Filter Operator
                    predicate: (key < 10) (type: boolean)
                    Statistics: Num rows: 9 Data size: 1803 Basic stats: COMPLETE Column stats: NONE
                    Select Operator
                      expressions: key (type: string), value (type: string)
                      outputColumnNames: _col0, _col1
                      Statistics: Num rows: 9 Data size: 1803 Basic stats: COMPLETE Column stats: NONE
                      Reduce Output Operator
                        sort order: 
                        Statistics: Num rows: 9 Data size: 1803 Basic stats: COMPLETE Column stats: NONE
                        value expressions: _col0 (type: string), _col1 (type: string)
        Reducer 2 
            Reduce Operator Tree:
              Join Operator
                condition map:
                     Inner Join 0 to 1
                condition expressions:
                  0 {VALUE._col0} {VALUE._col1}
                  1 {VALUE._col0} {VALUE._col1}
                outputColumnNames: _col0, _col1, _col2, _col3
                Statistics: Num rows: 9 Data size: 1983 Basic stats: COMPLETE Column stats: NONE
                Select Operator
                  expressions: _col0 (type: string), _col1 (type: string), _col2 (type: string), _col3 (type: string)
                  outputColumnNames: _col0, _col1, _col2, _col3
                  Statistics: Num rows: 9 Data size: 1983 Basic stats: COMPLETE Column stats: NONE
                  Reduce Output Operator
                    key expressions: _col0 (type: string), _col1 (type: string), _col2 (type: string), _col3 (type: string)
                    sort order: ++++
                    Statistics: Num rows: 9 Data size: 1983 Basic stats: COMPLETE Column stats: NONE
                    value expressions: _col0 (type: string), _col1 (type: string), _col2 (type: string), _col3 (type: string)
        Reducer 3 
            Reduce Operator Tree:
              Extract
                Statistics: Num rows: 9 Data size: 1983 Basic stats: COMPLETE Column stats: NONE
                File Output Operator
                  compressed: false
                  Statistics: Num rows: 9 Data size: 1983 Basic stats: COMPLETE Column stats: NONE
                  table:
                      input format: org.apache.hadoop.mapred.TextInputFormat
                      output format: org.apache.hadoop.hive.ql.io.HiveIgnoreKeyTextOutputFormat
                      serde: org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe

  Stage: Stage-0
    Fetch Operator
      limit: -1

PREHOOK: query: EXPLAIN FORMATTED
SELECT src1.key as k1, src1.value as v1, 
       src2.key as k2, src2.value as v2 FROM 
  (SELECT * FROM src WHERE src.key < 10) src1 
    JOIN 
  (SELECT * FROM src WHERE src.key < 10) src2
  SORT BY k1, v1, k2, v2
PREHOOK: type: QUERY
POSTHOOK: query: EXPLAIN FORMATTED
SELECT src1.key as k1, src1.value as v1, 
       src2.key as k2, src2.value as v2 FROM 
  (SELECT * FROM src WHERE src.key < 10) src1 
    JOIN 
  (SELECT * FROM src WHERE src.key < 10) src2
  SORT BY k1, v1, k2, v2
POSTHOOK: type: QUERY
#### A masked pattern was here ####
PREHOOK: query: SELECT src1.key as k1, src1.value as v1, 
       src2.key as k2, src2.value as v2 FROM 
  (SELECT * FROM src WHERE src.key < 10) src1 
    JOIN 
  (SELECT * FROM src WHERE src.key < 10) src2
  SORT BY k1, v1, k2, v2
PREHOOK: type: QUERY
PREHOOK: Input: default@src
#### A masked pattern was here ####
POSTHOOK: query: SELECT src1.key as k1, src1.value as v1, 
       src2.key as k2, src2.value as v2 FROM 
  (SELECT * FROM src WHERE src.key < 10) src1 
    JOIN 
  (SELECT * FROM src WHERE src.key < 10) src2
  SORT BY k1, v1, k2, v2
POSTHOOK: type: QUERY
POSTHOOK: Input: default@src
#### A masked pattern was here ####
0	val_0	0	val_0
0	val_0	0	val_0
0	val_0	0	val_0
0	val_0	0	val_0
0	val_0	0	val_0
0	val_0	0	val_0
0	val_0	0	val_0
0	val_0	0	val_0
0	val_0	0	val_0
0	val_0	2	val_2
0	val_0	2	val_2
0	val_0	2	val_2
0	val_0	4	val_4
0	val_0	4	val_4
0	val_0	4	val_4
0	val_0	5	val_5
0	val_0	5	val_5
0	val_0	5	val_5
0	val_0	5	val_5
0	val_0	5	val_5
0	val_0	5	val_5
0	val_0	5	val_5
0	val_0	5	val_5
0	val_0	5	val_5
0	val_0	8	val_8
0	val_0	8	val_8
0	val_0	8	val_8
0	val_0	9	val_9
0	val_0	9	val_9
0	val_0	9	val_9
2	val_2	0	val_0
2	val_2	0	val_0
2	val_2	0	val_0
2	val_2	2	val_2
2	val_2	4	val_4
2	val_2	5	val_5
2	val_2	5	val_5
2	val_2	5	val_5
2	val_2	8	val_8
2	val_2	9	val_9
4	val_4	0	val_0
4	val_4	0	val_0
4	val_4	0	val_0
4	val_4	2	val_2
4	val_4	4	val_4
4	val_4	5	val_5
4	val_4	5	val_5
4	val_4	5	val_5
4	val_4	8	val_8
4	val_4	9	val_9
5	val_5	0	val_0
5	val_5	0	val_0
5	val_5	0	val_0
5	val_5	0	val_0
5	val_5	0	val_0
5	val_5	0	val_0
5	val_5	0	val_0
5	val_5	0	val_0
5	val_5	0	val_0
5	val_5	2	val_2
5	val_5	2	val_2
5	val_5	2	val_2
5	val_5	4	val_4
5	val_5	4	val_4
5	val_5	4	val_4
5	val_5	5	val_5
5	val_5	5	val_5
5	val_5	5	val_5
5	val_5	5	val_5
5	val_5	5	val_5
5	val_5	5	val_5
5	val_5	5	val_5
5	val_5	5	val_5
5	val_5	5	val_5
5	val_5	8	val_8
5	val_5	8	val_8
5	val_5	8	val_8
5	val_5	9	val_9
5	val_5	9	val_9
5	val_5	9	val_9
8	val_8	0	val_0
8	val_8	0	val_0
8	val_8	0	val_0
8	val_8	2	val_2
8	val_8	4	val_4
8	val_8	5	val_5
8	val_8	5	val_5
8	val_8	5	val_5
8	val_8	8	val_8
8	val_8	9	val_9
9	val_9	0	val_0
9	val_9	0	val_0
9	val_9	0	val_0
9	val_9	2	val_2
9	val_9	4	val_4
9	val_9	5	val_5
9	val_9	5	val_5
9	val_9	5	val_5
9	val_9	8	val_8
9	val_9	9	val_9
