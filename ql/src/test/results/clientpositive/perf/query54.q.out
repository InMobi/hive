PREHOOK: query: explain with my_customers as ( select c_customer_sk , c_current_addr_sk from ( select cs_sold_date_sk sold_date_sk, cs_bill_customer_sk customer_sk, cs_item_sk item_sk from catalog_sales union all select ws_sold_date_sk sold_date_sk, ws_bill_customer_sk customer_sk, ws_item_sk item_sk from web_sales ) cs_or_ws_sales, item, date_dim, customer where sold_date_sk = d_date_sk and item_sk = i_item_sk and i_category = 'Jewelry' and i_class = 'football' and c_customer_sk = cs_or_ws_sales.customer_sk and d_moy = 3 and d_year = 2000 group by c_customer_sk , c_current_addr_sk ) , my_revenue as ( select c_customer_sk, sum(ss_ext_sales_price) as revenue from my_customers, store_sales, customer_address, store, date_dim where c_current_addr_sk = ca_address_sk and ca_county = s_county and ca_state = s_state and ss_sold_date_sk = d_date_sk and c_customer_sk = ss_customer_sk and d_month_seq between (1203) and (1205) group by c_customer_sk ) , segments as (select cast((revenue/50) as int) as segment from my_revenue ) select segment, count(*) as num_customers, segment*50 as segment_base from segments group by segment order by segment, num_customers limit 100
PREHOOK: type: QUERY
POSTHOOK: query: explain with my_customers as ( select c_customer_sk , c_current_addr_sk from ( select cs_sold_date_sk sold_date_sk, cs_bill_customer_sk customer_sk, cs_item_sk item_sk from catalog_sales union all select ws_sold_date_sk sold_date_sk, ws_bill_customer_sk customer_sk, ws_item_sk item_sk from web_sales ) cs_or_ws_sales, item, date_dim, customer where sold_date_sk = d_date_sk and item_sk = i_item_sk and i_category = 'Jewelry' and i_class = 'football' and c_customer_sk = cs_or_ws_sales.customer_sk and d_moy = 3 and d_year = 2000 group by c_customer_sk , c_current_addr_sk ) , my_revenue as ( select c_customer_sk, sum(ss_ext_sales_price) as revenue from my_customers, store_sales, customer_address, store, date_dim where c_current_addr_sk = ca_address_sk and ca_county = s_county and ca_state = s_state and ss_sold_date_sk = d_date_sk and c_customer_sk = ss_customer_sk and d_month_seq between (1203) and (1205) group by c_customer_sk ) , segments as (select cast((revenue/50) as int) as segment from my_revenue ) select segment, count(*) as num_customers, segment*50 as segment_base from segments group by segment order by segment, num_customers limit 100
POSTHOOK: type: QUERY
Plan optimized by CBO.

Vertex dependency in root stage
Map 1 <- Union 2 (CONTAINS)
Map 14 <- Union 2 (CONTAINS)
Reducer 10 <- Map 21 (SIMPLE_EDGE), Reducer 9 (SIMPLE_EDGE)
Reducer 11 <- Reducer 10 (SIMPLE_EDGE)
Reducer 12 <- Reducer 11 (SIMPLE_EDGE)
Reducer 13 <- Reducer 12 (SIMPLE_EDGE)
Reducer 3 <- Map 15 (SIMPLE_EDGE), Union 2 (SIMPLE_EDGE)
Reducer 4 <- Map 16 (SIMPLE_EDGE), Reducer 3 (SIMPLE_EDGE)
Reducer 5 <- Map 17 (SIMPLE_EDGE), Reducer 4 (SIMPLE_EDGE)
Reducer 6 <- Reducer 5 (SIMPLE_EDGE)
Reducer 7 <- Map 18 (SIMPLE_EDGE), Reducer 6 (SIMPLE_EDGE)
Reducer 8 <- Map 19 (SIMPLE_EDGE), Reducer 7 (SIMPLE_EDGE)
Reducer 9 <- Map 20 (SIMPLE_EDGE), Reducer 8 (SIMPLE_EDGE)

Stage-0
  Fetch Operator
    limit:100
    Stage-1
      Reducer 13
      File Output Operator [FS_68]
        Limit [LIM_67] (rows=100 width=860)
          Number of rows:100
          Select Operator [SEL_66] (rows=16105101 width=860)
            Output:["_col0","_col1","_col2"]
          <-Reducer 12 [SIMPLE_EDGE]
            SHUFFLE [RS_65]
              Select Operator [SEL_64] (rows=16105101 width=860)
                Output:["_col0","_col1","_col2"]
                Group By Operator [GBY_63] (rows=16105101 width=860)
                  Output:["_col0","_col1"],aggregations:["count(VALUE._col0)"],keys:KEY._col0
                <-Reducer 11 [SIMPLE_EDGE]
                  SHUFFLE [RS_62]
                    PartitionCols:_col0
                    Group By Operator [GBY_61] (rows=32210202 width=860)
                      Output:["_col0","_col1"],aggregations:["count()"],keys:_col0
                      Select Operator [SEL_59] (rows=32210202 width=860)
                        Output:["_col0"]
                        Group By Operator [GBY_58] (rows=32210202 width=860)
                          Output:["_col0","_col1"],aggregations:["sum(VALUE._col0)"],keys:KEY._col0
                        <-Reducer 10 [SIMPLE_EDGE]
                          SHUFFLE [RS_57]
                            PartitionCols:_col0
                            Group By Operator [GBY_56] (rows=64420404 width=860)
                              Output:["_col0","_col1"],aggregations:["sum(_col4)"],keys:_col0
                              Merge Join Operator [MERGEJOIN_126] (rows=64420404 width=860)
                                Conds:RS_52._col2=RS_53._col0(Inner),Output:["_col0","_col4"]
                              <-Map 21 [SIMPLE_EDGE]
                                SHUFFLE [RS_53]
                                  PartitionCols:_col0
                                  Select Operator [SEL_42] (rows=36524 width=1119)
                                    Output:["_col0"]
                                    Filter Operator [FIL_119] (rows=36524 width=1119)
                                      predicate:(d_month_seq BETWEEN 1203 AND 1205 and d_date_sk is not null)
                                      TableScan [TS_40] (rows=73049 width=1119)
                                        default@date_dim,date_dim,Tbl:COMPLETE,Col:NONE,Output:["d_date_sk","d_month_seq"]
                              <-Reducer 9 [SIMPLE_EDGE]
                                SHUFFLE [RS_52]
                                  PartitionCols:_col2
                                  Merge Join Operator [MERGEJOIN_125] (rows=58564003 width=860)
                                    Conds:RS_49._col6, _col7=RS_50._col0, _col1(Inner),Output:["_col0","_col2","_col4"]
                                  <-Map 20 [SIMPLE_EDGE]
                                    SHUFFLE [RS_50]
                                      PartitionCols:_col0, _col1
                                      Select Operator [SEL_39] (rows=1704 width=1910)
                                        Output:["_col0","_col1"]
                                        Filter Operator [FIL_118] (rows=1704 width=1910)
                                          predicate:(s_county is not null and s_state is not null)
                                          TableScan [TS_37] (rows=1704 width=1910)
                                            default@store,store,Tbl:COMPLETE,Col:NONE,Output:["s_county","s_state"]
                                  <-Reducer 8 [SIMPLE_EDGE]
                                    SHUFFLE [RS_49]
                                      PartitionCols:_col6, _col7
                                      Merge Join Operator [MERGEJOIN_124] (rows=53240002 width=860)
                                        Conds:RS_46._col1=RS_47._col0(Inner),Output:["_col0","_col2","_col4","_col6","_col7"]
                                      <-Map 19 [SIMPLE_EDGE]
                                        SHUFFLE [RS_47]
                                          PartitionCols:_col0
                                          Select Operator [SEL_36] (rows=40000000 width=1014)
                                            Output:["_col0","_col1","_col2"]
                                            Filter Operator [FIL_117] (rows=40000000 width=1014)
                                              predicate:(ca_address_sk is not null and ca_county is not null and ca_state is not null)
                                              TableScan [TS_34] (rows=40000000 width=1014)
                                                default@customer_address,customer_address,Tbl:COMPLETE,Col:NONE,Output:["ca_address_sk","ca_county","ca_state"]
                                      <-Reducer 7 [SIMPLE_EDGE]
                                        SHUFFLE [RS_46]
                                          PartitionCols:_col1
                                          Merge Join Operator [MERGEJOIN_123] (rows=48400001 width=860)
                                            Conds:RS_43._col0=RS_44._col1(Inner),Output:["_col0","_col1","_col2","_col4"]
                                          <-Map 18 [SIMPLE_EDGE]
                                            SHUFFLE [RS_44]
                                              PartitionCols:_col1
                                              Select Operator [SEL_33] (rows=1 width=0)
                                                Output:["_col0","_col1","_col2"]
                                                Filter Operator [FIL_116] (rows=1 width=0)
                                                  predicate:(ss_customer_sk is not null and ss_sold_date_sk is not null)
                                                  TableScan [TS_31] (rows=1 width=0)
                                                    default@store_sales,store_sales,Tbl:PARTIAL,Col:NONE,Output:["ss_sold_date_sk","ss_customer_sk","ss_ext_sales_price"]
                                          <-Reducer 6 [SIMPLE_EDGE]
                                            SHUFFLE [RS_43]
                                              PartitionCols:_col0
                                              Group By Operator [GBY_29] (rows=44000000 width=860)
                                                Output:["_col0","_col1"],keys:KEY._col0, KEY._col1
                                              <-Reducer 5 [SIMPLE_EDGE]
                                                SHUFFLE [RS_28]
                                                  PartitionCols:_col0, _col1
                                                  Group By Operator [GBY_27] (rows=88000001 width=860)
                                                    Output:["_col0","_col1"],keys:_col9, _col10
                                                    Merge Join Operator [MERGEJOIN_122] (rows=88000001 width=860)
                                                      Conds:RS_23._col1=RS_24._col0(Inner),Output:["_col9","_col10"]
                                                    <-Map 17 [SIMPLE_EDGE]
                                                      SHUFFLE [RS_24]
                                                        PartitionCols:_col0
                                                        Select Operator [SEL_16] (rows=80000000 width=860)
                                                          Output:["_col0","_col1"]
                                                          Filter Operator [FIL_115] (rows=80000000 width=860)
                                                            predicate:(c_customer_sk is not null and c_current_addr_sk is not null)
                                                            TableScan [TS_14] (rows=80000000 width=860)
                                                              default@customer,customer,Tbl:COMPLETE,Col:NONE,Output:["c_customer_sk","c_current_addr_sk"]
                                                    <-Reducer 4 [SIMPLE_EDGE]
                                                      SHUFFLE [RS_23]
                                                        PartitionCols:_col1
                                                        Merge Join Operator [MERGEJOIN_121] (rows=139755 width=1436)
                                                          Conds:RS_20._col0=RS_21._col0(Inner),Output:["_col1"]
                                                        <-Map 16 [SIMPLE_EDGE]
                                                          SHUFFLE [RS_21]
                                                            PartitionCols:_col0
                                                            Select Operator [SEL_13] (rows=18262 width=1119)
                                                              Output:["_col0"]
                                                              Filter Operator [FIL_114] (rows=18262 width=1119)
                                                                predicate:((d_moy = 3) and (d_year = 2000) and d_date_sk is not null)
                                                                TableScan [TS_11] (rows=73049 width=1119)
                                                                  default@date_dim,date_dim,Tbl:COMPLETE,Col:NONE,Output:["d_date_sk","d_year","d_moy"]
                                                        <-Reducer 3 [SIMPLE_EDGE]
                                                          SHUFFLE [RS_20]
                                                            PartitionCols:_col0
                                                            Merge Join Operator [MERGEJOIN_120] (rows=127050 width=1436)
                                                              Conds:Union 2._col2=RS_18._col0(Inner),Output:["_col0","_col1"]
                                                            <-Map 15 [SIMPLE_EDGE]
                                                              SHUFFLE [RS_18]
                                                                PartitionCols:_col0
                                                                Select Operator [SEL_10] (rows=115500 width=1436)
                                                                  Output:["_col0"]
                                                                  Filter Operator [FIL_113] (rows=115500 width=1436)
                                                                    predicate:((i_category = 'Jewelry') and (i_class = 'football') and i_item_sk is not null)
                                                                    TableScan [TS_8] (rows=462000 width=1436)
                                                                      default@item,item,Tbl:COMPLETE,Col:NONE,Output:["i_item_sk","i_class","i_category"]
                                                            <-Union 2 [SIMPLE_EDGE]
                                                              <-Map 1 [CONTAINS]
                                                                Reduce Output Operator [RS_17]
                                                                  PartitionCols:_col2
                                                                  Select Operator [SEL_2] (rows=1 width=0)
                                                                    Output:["_col0","_col1","_col2"]
                                                                    Filter Operator [FIL_111] (rows=1 width=0)
                                                                      predicate:(cs_item_sk is not null and cs_sold_date_sk is not null and cs_bill_customer_sk is not null)
                                                                      TableScan [TS_0] (rows=1 width=0)
                                                                        Output:["cs_sold_date_sk","cs_bill_customer_sk","cs_item_sk"]
                                                              <-Map 14 [CONTAINS]
                                                                Reduce Output Operator [RS_17]
                                                                  PartitionCols:_col2
                                                                  Select Operator [SEL_5] (rows=1 width=0)
                                                                    Output:["_col0","_col1","_col2"]
                                                                    Filter Operator [FIL_112] (rows=1 width=0)
                                                                      predicate:(ws_item_sk is not null and ws_sold_date_sk is not null and ws_bill_customer_sk is not null)
                                                                      TableScan [TS_3] (rows=1 width=0)
                                                                        Output:["ws_sold_date_sk","ws_item_sk","ws_bill_customer_sk"]

