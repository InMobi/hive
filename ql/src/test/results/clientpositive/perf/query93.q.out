PREHOOK: query: explain select ss_customer_sk ,sum(act_sales) sumsales from (select ss_item_sk ,ss_ticket_number ,ss_customer_sk ,case when sr_return_quantity is not null then (ss_quantity-sr_return_quantity)*ss_sales_price else (ss_quantity*ss_sales_price) end act_sales from store_sales left outer join store_returns on (store_returns.sr_item_sk = store_sales.ss_item_sk and store_returns.sr_ticket_number = store_sales.ss_ticket_number) ,reason where store_returns.sr_reason_sk = reason.r_reason_sk and r_reason_desc = 'Did not like the warranty') t group by ss_customer_sk order by sumsales, ss_customer_sk limit 100
PREHOOK: type: QUERY
POSTHOOK: query: explain select ss_customer_sk ,sum(act_sales) sumsales from (select ss_item_sk ,ss_ticket_number ,ss_customer_sk ,case when sr_return_quantity is not null then (ss_quantity-sr_return_quantity)*ss_sales_price else (ss_quantity*ss_sales_price) end act_sales from store_sales left outer join store_returns on (store_returns.sr_item_sk = store_sales.ss_item_sk and store_returns.sr_ticket_number = store_sales.ss_ticket_number) ,reason where store_returns.sr_reason_sk = reason.r_reason_sk and r_reason_desc = 'Did not like the warranty') t group by ss_customer_sk order by sumsales, ss_customer_sk limit 100
POSTHOOK: type: QUERY
Plan optimized by CBO.

Vertex dependency in root stage
Reducer 2 <- Map 1 (SIMPLE_EDGE), Map 6 (SIMPLE_EDGE)
Reducer 3 <- Map 7 (SIMPLE_EDGE), Reducer 2 (SIMPLE_EDGE)
Reducer 4 <- Reducer 3 (SIMPLE_EDGE)
Reducer 5 <- Reducer 4 (SIMPLE_EDGE)

Stage-0
  Fetch Operator
    limit:100
    Stage-1
      Reducer 5
      File Output Operator [FS_24]
        Limit [LIM_23] (rows=19 width=203)
          Number of rows:100
          Select Operator [SEL_22] (rows=19 width=203)
            Output:["_col0","_col1"]
          <-Reducer 4 [SIMPLE_EDGE]
            SHUFFLE [RS_21]
              Group By Operator [GBY_19] (rows=19 width=203)
                Output:["_col0","_col1"],aggregations:["sum(VALUE._col0)"],keys:KEY._col0
              <-Reducer 3 [SIMPLE_EDGE]
                SHUFFLE [RS_18]
                  PartitionCols:_col0
                  Group By Operator [GBY_17] (rows=39 width=203)
                    Output:["_col0","_col1"],aggregations:["sum(_col1)"],keys:_col0
                    Select Operator [SEL_15] (rows=39 width=203)
                      Output:["_col0","_col1"]
                      Merge Join Operator [MERGEJOIN_34] (rows=39 width=203)
                        Conds:RS_12._col6=RS_13._col0(Inner),Output:["_col1","_col3","_col4","_col8"]
                      <-Map 7 [SIMPLE_EDGE]
                        SHUFFLE [RS_13]
                          PartitionCols:_col0
                          Select Operator [SEL_8] (rows=36 width=200)
                            Output:["_col0"]
                            Filter Operator [FIL_32] (rows=36 width=200)
                              predicate:((r_reason_desc = 'Did not like the warranty') and r_reason_sk is not null)
                              TableScan [TS_6] (rows=72 width=200)
                                default@reason,reason,Tbl:COMPLETE,Col:NONE,Output:["r_reason_sk","r_reason_desc"]
                      <-Reducer 2 [SIMPLE_EDGE]
                        SHUFFLE [RS_12]
                          PartitionCols:_col6
                          Merge Join Operator [MERGEJOIN_33] (rows=1 width=0)
                            Conds:RS_9._col0, _col2=RS_10._col0, _col2(Inner),Output:["_col1","_col3","_col4","_col6","_col8"]
                          <-Map 1 [SIMPLE_EDGE]
                            SHUFFLE [RS_9]
                              PartitionCols:_col0, _col2
                              Select Operator [SEL_2] (rows=1 width=0)
                                Output:["_col0","_col1","_col2","_col3","_col4"]
                                Filter Operator [FIL_30] (rows=1 width=0)
                                  predicate:(ss_item_sk is not null and ss_ticket_number is not null)
                                  TableScan [TS_0] (rows=1 width=0)
                                    default@store_sales,store_sales,Tbl:PARTIAL,Col:NONE,Output:["ss_item_sk","ss_customer_sk","ss_ticket_number","ss_quantity","ss_sales_price"]
                          <-Map 6 [SIMPLE_EDGE]
                            SHUFFLE [RS_10]
                              PartitionCols:_col0, _col2
                              Select Operator [SEL_5] (rows=1 width=0)
                                Output:["_col0","_col1","_col2","_col3"]
                                Filter Operator [FIL_31] (rows=1 width=0)
                                  predicate:(sr_reason_sk is not null and sr_item_sk is not null and sr_ticket_number is not null)
                                  TableScan [TS_3] (rows=1 width=0)
                                    default@store_returns,store_returns,Tbl:PARTIAL,Col:NONE,Output:["sr_item_sk","sr_reason_sk","sr_ticket_number","sr_return_quantity"]

