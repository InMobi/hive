PREHOOK: query: create table src0 like src
PREHOOK: type: CREATETABLE
PREHOOK: Output: database:default
POSTHOOK: query: create table src0 like src
POSTHOOK: type: CREATETABLE
POSTHOOK: Output: database:default
POSTHOOK: Output: default@src0
PREHOOK: query: insert into table src0 select * from src where src.key < 10
PREHOOK: type: QUERY
PREHOOK: Input: default@src
PREHOOK: Output: default@src0
POSTHOOK: query: insert into table src0 select * from src where src.key < 10
POSTHOOK: type: QUERY
POSTHOOK: Input: default@src
POSTHOOK: Output: default@src0
POSTHOOK: Lineage: src0.key SIMPLE [(src)src.FieldSchema(name:key, type:string, comment:default), ]
POSTHOOK: Lineage: src0.value SIMPLE [(src)src.FieldSchema(name:value, type:string, comment:default), ]
PREHOOK: query: explain 
select src1.key as k1, src1.value as v1, src2.key, src2.value
from src0 src1 inner join src0 src2 on src1.key = src2.key order by k1, v1
PREHOOK: type: QUERY
POSTHOOK: query: explain 
select src1.key as k1, src1.value as v1, src2.key, src2.value
from src0 src1 inner join src0 src2 on src1.key = src2.key order by k1, v1
POSTHOOK: type: QUERY
POSTHOOK: Lineage: src0.key SIMPLE [(src)src.FieldSchema(name:key, type:string, comment:default), ]
POSTHOOK: Lineage: src0.value SIMPLE [(src)src.FieldSchema(name:value, type:string, comment:default), ]
STAGE DEPENDENCIES:
  Stage-5 is a root stage
  Stage-2 depends on stages: Stage-5
  Stage-0 is a root stage

STAGE PLANS:
  Stage: Stage-5
    Map Reduce Local Work
      Alias -> Map Local Tables:
        src1 
          Fetch Operator
            limit: -1
      Alias -> Map Local Operator Tree:
        src1 
          TableScan
            alias: src1
            Statistics: Num rows: 10 Data size: 70 Basic stats: COMPLETE Column stats: NONE
            HashTable Sink Operator
              condition expressions:
                0 {key} {value}
                1 {key} {value}
              keys:
                0 key (type: string)
                1 key (type: string)

  Stage: Stage-2
    Map Reduce
      Map Operator Tree:
          TableScan
            alias: src2
            Statistics: Num rows: 10 Data size: 70 Basic stats: COMPLETE Column stats: NONE
            Map Join Operator
              condition map:
                   Inner Join 0 to 1
              condition expressions:
                0 {key} {value}
                1 {key} {value}
              keys:
                0 key (type: string)
                1 key (type: string)
              outputColumnNames: _col0, _col1, _col4, _col5
              Statistics: Num rows: 11 Data size: 77 Basic stats: COMPLETE Column stats: NONE
              Select Operator
                expressions: _col0 (type: string), _col1 (type: string), _col4 (type: string), _col5 (type: string)
                outputColumnNames: _col0, _col1, _col2, _col3
                Statistics: Num rows: 11 Data size: 77 Basic stats: COMPLETE Column stats: NONE
                Reduce Output Operator
                  key expressions: _col0 (type: string), _col1 (type: string)
                  sort order: ++
                  Statistics: Num rows: 11 Data size: 77 Basic stats: COMPLETE Column stats: NONE
                  value expressions: _col0 (type: string), _col1 (type: string), _col2 (type: string), _col3 (type: string)
      Local Work:
        Map Reduce Local Work
      Reduce Operator Tree:
        Extract
          Statistics: Num rows: 11 Data size: 77 Basic stats: COMPLETE Column stats: NONE
          File Output Operator
            compressed: false
            Statistics: Num rows: 11 Data size: 77 Basic stats: COMPLETE Column stats: NONE
            table:
                input format: org.apache.hadoop.mapred.TextInputFormat
                output format: org.apache.hadoop.hive.ql.io.HiveIgnoreKeyTextOutputFormat
                serde: org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe

  Stage: Stage-0
    Fetch Operator
      limit: -1

PREHOOK: query: select src1.key as k1, src1.value as v1, src2.key, src2.value
from src0 src1 inner join src0 src2 on src1.key = src2.key order by k1, v1
PREHOOK: type: QUERY
PREHOOK: Input: default@src0
#### A masked pattern was here ####
POSTHOOK: query: select src1.key as k1, src1.value as v1, src2.key, src2.value
from src0 src1 inner join src0 src2 on src1.key = src2.key order by k1, v1
POSTHOOK: type: QUERY
POSTHOOK: Input: default@src0
#### A masked pattern was here ####
POSTHOOK: Lineage: src0.key SIMPLE [(src)src.FieldSchema(name:key, type:string, comment:default), ]
POSTHOOK: Lineage: src0.value SIMPLE [(src)src.FieldSchema(name:value, type:string, comment:default), ]
0	val_0	0	val_0
0	val_0	0	val_0
0	val_0	0	val_0
0	val_0	0	val_0
0	val_0	0	val_0
0	val_0	0	val_0
0	val_0	0	val_0
0	val_0	0	val_0
0	val_0	0	val_0
2	val_2	2	val_2
4	val_4	4	val_4
5	val_5	5	val_5
5	val_5	5	val_5
5	val_5	5	val_5
5	val_5	5	val_5
5	val_5	5	val_5
5	val_5	5	val_5
5	val_5	5	val_5
5	val_5	5	val_5
5	val_5	5	val_5
8	val_8	8	val_8
9	val_9	9	val_9
PREHOOK: query: drop table src0
PREHOOK: type: DROPTABLE
PREHOOK: Input: default@src0
PREHOOK: Output: default@src0
POSTHOOK: query: drop table src0
POSTHOOK: type: DROPTABLE
POSTHOOK: Input: default@src0
POSTHOOK: Output: default@src0
POSTHOOK: Lineage: src0.key SIMPLE [(src)src.FieldSchema(name:key, type:string, comment:default), ]
POSTHOOK: Lineage: src0.value SIMPLE [(src)src.FieldSchema(name:value, type:string, comment:default), ]
