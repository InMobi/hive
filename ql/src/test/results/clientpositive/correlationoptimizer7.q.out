PREHOOK: query: EXPLAIN
SELECT xx.key, xx.cnt, yy.key, yy.value
FROM (SELECT x.key AS key, count(1) AS cnt
      FROM src x JOIN src1 y ON (x.key = y.key)
      GROUP BY x.key) xx
JOIN src1 yy
ON xx.key=yy.key ORDER BY xx.key, xx.cnt, yy.key, yy.value
PREHOOK: type: QUERY
POSTHOOK: query: EXPLAIN
SELECT xx.key, xx.cnt, yy.key, yy.value
FROM (SELECT x.key AS key, count(1) AS cnt
      FROM src x JOIN src1 y ON (x.key = y.key)
      GROUP BY x.key) xx
JOIN src1 yy
ON xx.key=yy.key ORDER BY xx.key, xx.cnt, yy.key, yy.value
POSTHOOK: type: QUERY
STAGE DEPENDENCIES:
  Stage-9 is a root stage
  Stage-4 depends on stages: Stage-9
  Stage-8 depends on stages: Stage-4
  Stage-2 depends on stages: Stage-8
  Stage-0 is a root stage

STAGE PLANS:
  Stage: Stage-9
    Map Reduce Local Work
      Alias -> Map Local Tables:
        xx:y 
          Fetch Operator
            limit: -1
      Alias -> Map Local Operator Tree:
        xx:y 
          TableScan
            alias: y
            Statistics: Num rows: 2 Data size: 216 Basic stats: COMPLETE Column stats: NONE
            HashTable Sink Operator
              condition expressions:
                0 {key}
                1 
              keys:
                0 key (type: string)
                1 key (type: string)

  Stage: Stage-4
    Map Reduce
      Map Operator Tree:
          TableScan
            alias: x
            Statistics: Num rows: 58 Data size: 5812 Basic stats: COMPLETE Column stats: NONE
            Map Join Operator
              condition map:
                   Inner Join 0 to 1
              condition expressions:
                0 {key}
                1 
              keys:
                0 key (type: string)
                1 key (type: string)
              outputColumnNames: _col0
              Statistics: Num rows: 63 Data size: 6393 Basic stats: COMPLETE Column stats: NONE
              Select Operator
                expressions: _col0 (type: string)
                outputColumnNames: _col0
                Statistics: Num rows: 63 Data size: 6393 Basic stats: COMPLETE Column stats: NONE
                Group By Operator
                  aggregations: count(1)
                  keys: _col0 (type: string)
                  mode: hash
                  outputColumnNames: _col0, _col1
                  Statistics: Num rows: 63 Data size: 6393 Basic stats: COMPLETE Column stats: NONE
                  Reduce Output Operator
                    key expressions: _col0 (type: string)
                    sort order: +
                    Map-reduce partition columns: _col0 (type: string)
                    Statistics: Num rows: 63 Data size: 6393 Basic stats: COMPLETE Column stats: NONE
                    value expressions: _col1 (type: bigint)
      Local Work:
        Map Reduce Local Work
      Reduce Operator Tree:
        Group By Operator
          aggregations: count(VALUE._col0)
          keys: KEY._col0 (type: string)
          mode: mergepartial
          outputColumnNames: _col0, _col1
          Statistics: Num rows: 31 Data size: 3145 Basic stats: COMPLETE Column stats: NONE
          Select Operator
            expressions: _col0 (type: string), _col1 (type: bigint)
            outputColumnNames: _col0, _col1
            Statistics: Num rows: 31 Data size: 3145 Basic stats: COMPLETE Column stats: NONE
            File Output Operator
              compressed: false
              table:
                  input format: org.apache.hadoop.mapred.SequenceFileInputFormat
                  output format: org.apache.hadoop.hive.ql.io.HiveSequenceFileOutputFormat
                  serde: org.apache.hadoop.hive.serde2.lazybinary.LazyBinarySerDe

  Stage: Stage-8
    Map Reduce Local Work
      Alias -> Map Local Tables:
        yy 
          Fetch Operator
            limit: -1
      Alias -> Map Local Operator Tree:
        yy 
          TableScan
            alias: yy
            Statistics: Num rows: 1 Data size: 216 Basic stats: COMPLETE Column stats: NONE
            HashTable Sink Operator
              condition expressions:
                0 {_col0} {_col1}
                1 {key} {value}
              keys:
                0 _col0 (type: string)
                1 key (type: string)

  Stage: Stage-2
    Map Reduce
      Map Operator Tree:
          TableScan
            Map Join Operator
              condition map:
                   Inner Join 0 to 1
              condition expressions:
                0 {_col0} {_col1}
                1 {key} {value}
              keys:
                0 _col0 (type: string)
                1 key (type: string)
              outputColumnNames: _col0, _col1, _col2, _col3
              Statistics: Num rows: 34 Data size: 3459 Basic stats: COMPLETE Column stats: NONE
              Select Operator
                expressions: _col0 (type: string), _col1 (type: bigint), _col2 (type: string), _col3 (type: string)
                outputColumnNames: _col0, _col1, _col2, _col3
                Statistics: Num rows: 34 Data size: 3459 Basic stats: COMPLETE Column stats: NONE
                Reduce Output Operator
                  key expressions: _col0 (type: string), _col1 (type: bigint), _col2 (type: string), _col3 (type: string)
                  sort order: ++++
                  Statistics: Num rows: 34 Data size: 3459 Basic stats: COMPLETE Column stats: NONE
                  value expressions: _col0 (type: string), _col1 (type: bigint), _col2 (type: string), _col3 (type: string)
      Local Work:
        Map Reduce Local Work
      Reduce Operator Tree:
        Extract
          Statistics: Num rows: 34 Data size: 3459 Basic stats: COMPLETE Column stats: NONE
          File Output Operator
            compressed: false
            Statistics: Num rows: 34 Data size: 3459 Basic stats: COMPLETE Column stats: NONE
            table:
                input format: org.apache.hadoop.mapred.TextInputFormat
                output format: org.apache.hadoop.hive.ql.io.HiveIgnoreKeyTextOutputFormat
                serde: org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe

  Stage: Stage-0
    Fetch Operator
      limit: -1

PREHOOK: query: SELECT xx.key, xx.cnt, yy.key, yy.value
FROM (SELECT x.key AS key, count(1) AS cnt
      FROM src x JOIN src1 y ON (x.key = y.key)
      GROUP BY x.key) xx
JOIN src1 yy
ON xx.key=yy.key ORDER BY xx.key, xx.cnt, yy.key, yy.value
PREHOOK: type: QUERY
PREHOOK: Input: default@src
PREHOOK: Input: default@src1
#### A masked pattern was here ####
POSTHOOK: query: SELECT xx.key, xx.cnt, yy.key, yy.value
FROM (SELECT x.key AS key, count(1) AS cnt
      FROM src x JOIN src1 y ON (x.key = y.key)
      GROUP BY x.key) xx
JOIN src1 yy
ON xx.key=yy.key ORDER BY xx.key, xx.cnt, yy.key, yy.value
POSTHOOK: type: QUERY
POSTHOOK: Input: default@src
POSTHOOK: Input: default@src1
#### A masked pattern was here ####
128	3	128	
146	2	146	val_146
150	1	150	val_150
213	2	213	val_213
224	2	224	
238	2	238	val_238
255	2	255	val_255
273	3	273	val_273
278	2	278	val_278
311	3	311	val_311
369	3	369	
401	5	401	val_401
406	4	406	val_406
66	1	66	val_66
98	2	98	val_98
PREHOOK: query: EXPLAIN
SELECT xx.key, xx.cnt, yy.key, yy.value
FROM (SELECT x.key AS key, count(1) AS cnt
      FROM src x JOIN src1 y ON (x.key = y.key)
      GROUP BY x.key) xx
JOIN src1 yy
ON xx.key=yy.key ORDER BY xx.key, xx.cnt, yy.key, yy.value
PREHOOK: type: QUERY
POSTHOOK: query: EXPLAIN
SELECT xx.key, xx.cnt, yy.key, yy.value
FROM (SELECT x.key AS key, count(1) AS cnt
      FROM src x JOIN src1 y ON (x.key = y.key)
      GROUP BY x.key) xx
JOIN src1 yy
ON xx.key=yy.key ORDER BY xx.key, xx.cnt, yy.key, yy.value
POSTHOOK: type: QUERY
STAGE DEPENDENCIES:
  Stage-6 is a root stage
  Stage-1 depends on stages: Stage-6
  Stage-2 depends on stages: Stage-1
  Stage-0 is a root stage

STAGE PLANS:
  Stage: Stage-6
    Map Reduce Local Work
      Alias -> Map Local Tables:
        xx:y 
          Fetch Operator
            limit: -1
      Alias -> Map Local Operator Tree:
        xx:y 
          TableScan
            alias: y
            Statistics: Num rows: 2 Data size: 216 Basic stats: COMPLETE Column stats: NONE
            HashTable Sink Operator
              condition expressions:
                0 {key}
                1 
              keys:
                0 key (type: string)
                1 key (type: string)

  Stage: Stage-1
    Map Reduce
      Map Operator Tree:
          TableScan
            alias: yy
            Statistics: Num rows: 1 Data size: 216 Basic stats: COMPLETE Column stats: NONE
            Reduce Output Operator
              key expressions: key (type: string)
              sort order: +
              Map-reduce partition columns: key (type: string)
              Statistics: Num rows: 1 Data size: 216 Basic stats: COMPLETE Column stats: NONE
              value expressions: key (type: string), value (type: string)
          TableScan
            alias: x
            Statistics: Num rows: 58 Data size: 5812 Basic stats: COMPLETE Column stats: NONE
            Map Join Operator
              condition map:
                   Inner Join 0 to 1
              condition expressions:
                0 {key}
                1 
              keys:
                0 key (type: string)
                1 key (type: string)
              outputColumnNames: _col0
              Statistics: Num rows: 63 Data size: 6393 Basic stats: COMPLETE Column stats: NONE
              Select Operator
                expressions: _col0 (type: string)
                outputColumnNames: _col0
                Statistics: Num rows: 63 Data size: 6393 Basic stats: COMPLETE Column stats: NONE
                Group By Operator
                  aggregations: count(1)
                  keys: _col0 (type: string)
                  mode: hash
                  outputColumnNames: _col0, _col1
                  Statistics: Num rows: 63 Data size: 6393 Basic stats: COMPLETE Column stats: NONE
                  Reduce Output Operator
                    key expressions: _col0 (type: string)
                    sort order: +
                    Map-reduce partition columns: _col0 (type: string)
                    Statistics: Num rows: 63 Data size: 6393 Basic stats: COMPLETE Column stats: NONE
                    value expressions: _col1 (type: bigint)
      Local Work:
        Map Reduce Local Work
      Reduce Operator Tree:
        Demux Operator
          Statistics: Num rows: 64 Data size: 6609 Basic stats: COMPLETE Column stats: NONE
          Group By Operator
            aggregations: count(VALUE._col0)
            keys: KEY._col0 (type: string)
            mode: mergepartial
            outputColumnNames: _col0, _col1
            Statistics: Num rows: 32 Data size: 3304 Basic stats: COMPLETE Column stats: NONE
            Select Operator
              expressions: _col0 (type: string), _col1 (type: bigint)
              outputColumnNames: _col0, _col1
              Statistics: Num rows: 32 Data size: 3304 Basic stats: COMPLETE Column stats: NONE
              Mux Operator
                Statistics: Num rows: 96 Data size: 9913 Basic stats: COMPLETE Column stats: NONE
                Join Operator
                  condition map:
                       Inner Join 0 to 1
                  condition expressions:
                    0 {VALUE._col0} {VALUE._col1}
                    1 {VALUE._col0} {VALUE._col1}
                  outputColumnNames: _col0, _col1, _col2, _col3
                  Statistics: Num rows: 0 Data size: 0 Basic stats: NONE Column stats: NONE
                  Select Operator
                    expressions: _col0 (type: string), _col1 (type: bigint), _col2 (type: string), _col3 (type: string)
                    outputColumnNames: _col0, _col1, _col2, _col3
                    Statistics: Num rows: 0 Data size: 0 Basic stats: NONE Column stats: NONE
                    File Output Operator
                      compressed: false
                      table:
                          input format: org.apache.hadoop.mapred.SequenceFileInputFormat
                          output format: org.apache.hadoop.hive.ql.io.HiveSequenceFileOutputFormat
                          serde: org.apache.hadoop.hive.serde2.lazybinary.LazyBinarySerDe
          Mux Operator
            Statistics: Num rows: 96 Data size: 9913 Basic stats: COMPLETE Column stats: NONE
            Join Operator
              condition map:
                   Inner Join 0 to 1
              condition expressions:
                0 {VALUE._col0} {VALUE._col1}
                1 {VALUE._col0} {VALUE._col1}
              outputColumnNames: _col0, _col1, _col2, _col3
              Statistics: Num rows: 0 Data size: 0 Basic stats: NONE Column stats: NONE
              Select Operator
                expressions: _col0 (type: string), _col1 (type: bigint), _col2 (type: string), _col3 (type: string)
                outputColumnNames: _col0, _col1, _col2, _col3
                Statistics: Num rows: 0 Data size: 0 Basic stats: NONE Column stats: NONE
                File Output Operator
                  compressed: false
                  table:
                      input format: org.apache.hadoop.mapred.SequenceFileInputFormat
                      output format: org.apache.hadoop.hive.ql.io.HiveSequenceFileOutputFormat
                      serde: org.apache.hadoop.hive.serde2.lazybinary.LazyBinarySerDe

  Stage: Stage-2
    Map Reduce
      Map Operator Tree:
          TableScan
            Reduce Output Operator
              key expressions: _col0 (type: string), _col1 (type: bigint), _col2 (type: string), _col3 (type: string)
              sort order: ++++
              Statistics: Num rows: 0 Data size: 0 Basic stats: NONE Column stats: NONE
              value expressions: _col0 (type: string), _col1 (type: bigint), _col2 (type: string), _col3 (type: string)
      Reduce Operator Tree:
        Extract
          Statistics: Num rows: 0 Data size: 0 Basic stats: NONE Column stats: NONE
          File Output Operator
            compressed: false
            Statistics: Num rows: 0 Data size: 0 Basic stats: NONE Column stats: NONE
            table:
                input format: org.apache.hadoop.mapred.TextInputFormat
                output format: org.apache.hadoop.hive.ql.io.HiveIgnoreKeyTextOutputFormat
                serde: org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe

  Stage: Stage-0
    Fetch Operator
      limit: -1

PREHOOK: query: SELECT xx.key, xx.cnt, yy.key, yy.value
FROM (SELECT x.key AS key, count(1) AS cnt
      FROM src x JOIN src1 y ON (x.key = y.key)
      GROUP BY x.key) xx
JOIN src1 yy
ON xx.key=yy.key ORDER BY xx.key, xx.cnt, yy.key, yy.value
PREHOOK: type: QUERY
PREHOOK: Input: default@src
PREHOOK: Input: default@src1
#### A masked pattern was here ####
POSTHOOK: query: SELECT xx.key, xx.cnt, yy.key, yy.value
FROM (SELECT x.key AS key, count(1) AS cnt
      FROM src x JOIN src1 y ON (x.key = y.key)
      GROUP BY x.key) xx
JOIN src1 yy
ON xx.key=yy.key ORDER BY xx.key, xx.cnt, yy.key, yy.value
POSTHOOK: type: QUERY
POSTHOOK: Input: default@src
POSTHOOK: Input: default@src1
#### A masked pattern was here ####
128	3	128	
146	2	146	val_146
150	1	150	val_150
213	2	213	val_213
224	2	224	
238	2	238	val_238
255	2	255	val_255
273	3	273	val_273
278	2	278	val_278
311	3	311	val_311
369	3	369	
401	5	401	val_401
406	4	406	val_406
66	1	66	val_66
98	2	98	val_98
PREHOOK: query: -- Without correlation optimizer, we will have 3 MR jobs.
-- The first one is a MapJoin and Aggregation (in the Reduce Phase).
-- The second one is another MapJoin. The third one is for ordering.
-- With the correlation optimizer, right now, we have
-- 2 MR jobs. The first one will evaluate the sub-query xx and the join of
-- xx and yy. The second one will do the ORDER BY.
EXPLAIN
SELECT xx.key, xx.cnt, yy.key, yy.value
FROM (SELECT x.key AS key, count(1) AS cnt
      FROM src x JOIN src1 y ON (x.key = y.key)
      GROUP BY x.key) xx
JOIN src1 yy
ON xx.key=yy.key ORDER BY xx.key, xx.cnt, yy.key, yy.value
PREHOOK: type: QUERY
POSTHOOK: query: -- Without correlation optimizer, we will have 3 MR jobs.
-- The first one is a MapJoin and Aggregation (in the Reduce Phase).
-- The second one is another MapJoin. The third one is for ordering.
-- With the correlation optimizer, right now, we have
-- 2 MR jobs. The first one will evaluate the sub-query xx and the join of
-- xx and yy. The second one will do the ORDER BY.
EXPLAIN
SELECT xx.key, xx.cnt, yy.key, yy.value
FROM (SELECT x.key AS key, count(1) AS cnt
      FROM src x JOIN src1 y ON (x.key = y.key)
      GROUP BY x.key) xx
JOIN src1 yy
ON xx.key=yy.key ORDER BY xx.key, xx.cnt, yy.key, yy.value
POSTHOOK: type: QUERY
STAGE DEPENDENCIES:
  Stage-9 is a root stage
  Stage-4 depends on stages: Stage-9
  Stage-8 depends on stages: Stage-4
  Stage-2 depends on stages: Stage-8
  Stage-0 is a root stage

STAGE PLANS:
  Stage: Stage-9
    Map Reduce Local Work
      Alias -> Map Local Tables:
        xx:y 
          Fetch Operator
            limit: -1
      Alias -> Map Local Operator Tree:
        xx:y 
          TableScan
            alias: y
            Statistics: Num rows: 2 Data size: 216 Basic stats: COMPLETE Column stats: NONE
            HashTable Sink Operator
              condition expressions:
                0 {key}
                1 
              keys:
                0 key (type: string)
                1 key (type: string)

  Stage: Stage-4
    Map Reduce
      Map Operator Tree:
          TableScan
            alias: x
            Statistics: Num rows: 58 Data size: 5812 Basic stats: COMPLETE Column stats: NONE
            Map Join Operator
              condition map:
                   Inner Join 0 to 1
              condition expressions:
                0 {key}
                1 
              keys:
                0 key (type: string)
                1 key (type: string)
              outputColumnNames: _col0
              Statistics: Num rows: 63 Data size: 6393 Basic stats: COMPLETE Column stats: NONE
              Select Operator
                expressions: _col0 (type: string)
                outputColumnNames: _col0
                Statistics: Num rows: 63 Data size: 6393 Basic stats: COMPLETE Column stats: NONE
                Group By Operator
                  aggregations: count(1)
                  keys: _col0 (type: string)
                  mode: hash
                  outputColumnNames: _col0, _col1
                  Statistics: Num rows: 63 Data size: 6393 Basic stats: COMPLETE Column stats: NONE
                  Reduce Output Operator
                    key expressions: _col0 (type: string)
                    sort order: +
                    Map-reduce partition columns: _col0 (type: string)
                    Statistics: Num rows: 63 Data size: 6393 Basic stats: COMPLETE Column stats: NONE
                    value expressions: _col1 (type: bigint)
      Local Work:
        Map Reduce Local Work
      Reduce Operator Tree:
        Group By Operator
          aggregations: count(VALUE._col0)
          keys: KEY._col0 (type: string)
          mode: mergepartial
          outputColumnNames: _col0, _col1
          Statistics: Num rows: 31 Data size: 3145 Basic stats: COMPLETE Column stats: NONE
          Select Operator
            expressions: _col0 (type: string), _col1 (type: bigint)
            outputColumnNames: _col0, _col1
            Statistics: Num rows: 31 Data size: 3145 Basic stats: COMPLETE Column stats: NONE
            File Output Operator
              compressed: false
              table:
                  input format: org.apache.hadoop.mapred.SequenceFileInputFormat
                  output format: org.apache.hadoop.hive.ql.io.HiveSequenceFileOutputFormat
                  serde: org.apache.hadoop.hive.serde2.lazybinary.LazyBinarySerDe

  Stage: Stage-8
    Map Reduce Local Work
      Alias -> Map Local Tables:
        yy 
          Fetch Operator
            limit: -1
      Alias -> Map Local Operator Tree:
        yy 
          TableScan
            alias: yy
            Statistics: Num rows: 1 Data size: 216 Basic stats: COMPLETE Column stats: NONE
            HashTable Sink Operator
              condition expressions:
                0 {_col0} {_col1}
                1 {key} {value}
              keys:
                0 _col0 (type: string)
                1 key (type: string)

  Stage: Stage-2
    Map Reduce
      Map Operator Tree:
          TableScan
            Map Join Operator
              condition map:
                   Inner Join 0 to 1
              condition expressions:
                0 {_col0} {_col1}
                1 {key} {value}
              keys:
                0 _col0 (type: string)
                1 key (type: string)
              outputColumnNames: _col0, _col1, _col2, _col3
              Statistics: Num rows: 34 Data size: 3459 Basic stats: COMPLETE Column stats: NONE
              Select Operator
                expressions: _col0 (type: string), _col1 (type: bigint), _col2 (type: string), _col3 (type: string)
                outputColumnNames: _col0, _col1, _col2, _col3
                Statistics: Num rows: 34 Data size: 3459 Basic stats: COMPLETE Column stats: NONE
                Reduce Output Operator
                  key expressions: _col0 (type: string), _col1 (type: bigint), _col2 (type: string), _col3 (type: string)
                  sort order: ++++
                  Statistics: Num rows: 34 Data size: 3459 Basic stats: COMPLETE Column stats: NONE
                  value expressions: _col0 (type: string), _col1 (type: bigint), _col2 (type: string), _col3 (type: string)
      Local Work:
        Map Reduce Local Work
      Reduce Operator Tree:
        Extract
          Statistics: Num rows: 34 Data size: 3459 Basic stats: COMPLETE Column stats: NONE
          File Output Operator
            compressed: false
            Statistics: Num rows: 34 Data size: 3459 Basic stats: COMPLETE Column stats: NONE
            table:
                input format: org.apache.hadoop.mapred.TextInputFormat
                output format: org.apache.hadoop.hive.ql.io.HiveIgnoreKeyTextOutputFormat
                serde: org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe

  Stage: Stage-0
    Fetch Operator
      limit: -1

PREHOOK: query: SELECT xx.key, xx.cnt, yy.key, yy.value
FROM (SELECT x.key AS key, count(1) AS cnt
      FROM src x JOIN src1 y ON (x.key = y.key)
      GROUP BY x.key) xx
JOIN src1 yy
ON xx.key=yy.key ORDER BY xx.key, xx.cnt, yy.key, yy.value
PREHOOK: type: QUERY
PREHOOK: Input: default@src
PREHOOK: Input: default@src1
#### A masked pattern was here ####
POSTHOOK: query: SELECT xx.key, xx.cnt, yy.key, yy.value
FROM (SELECT x.key AS key, count(1) AS cnt
      FROM src x JOIN src1 y ON (x.key = y.key)
      GROUP BY x.key) xx
JOIN src1 yy
ON xx.key=yy.key ORDER BY xx.key, xx.cnt, yy.key, yy.value
POSTHOOK: type: QUERY
POSTHOOK: Input: default@src
POSTHOOK: Input: default@src1
#### A masked pattern was here ####
128	3	128	
146	2	146	val_146
150	1	150	val_150
213	2	213	val_213
224	2	224	
238	2	238	val_238
255	2	255	val_255
273	3	273	val_273
278	2	278	val_278
311	3	311	val_311
369	3	369	
401	5	401	val_401
406	4	406	val_406
66	1	66	val_66
98	2	98	val_98
PREHOOK: query: EXPLAIN
SELECT xx.key, xx.cnt, yy.key, yy.value
FROM (SELECT x.key AS key, count(1) AS cnt
      FROM src x JOIN src1 y ON (x.key = y.key)
      GROUP BY x.key) xx
JOIN src1 yy
ON xx.key=yy.key ORDER BY xx.key, xx.cnt, yy.key, yy.value
PREHOOK: type: QUERY
POSTHOOK: query: EXPLAIN
SELECT xx.key, xx.cnt, yy.key, yy.value
FROM (SELECT x.key AS key, count(1) AS cnt
      FROM src x JOIN src1 y ON (x.key = y.key)
      GROUP BY x.key) xx
JOIN src1 yy
ON xx.key=yy.key ORDER BY xx.key, xx.cnt, yy.key, yy.value
POSTHOOK: type: QUERY
STAGE DEPENDENCIES:
  Stage-6 is a root stage
  Stage-1 depends on stages: Stage-6
  Stage-2 depends on stages: Stage-1
  Stage-0 is a root stage

STAGE PLANS:
  Stage: Stage-6
    Map Reduce Local Work
      Alias -> Map Local Tables:
        xx:y 
          Fetch Operator
            limit: -1
      Alias -> Map Local Operator Tree:
        xx:y 
          TableScan
            alias: y
            Statistics: Num rows: 2 Data size: 216 Basic stats: COMPLETE Column stats: NONE
            HashTable Sink Operator
              condition expressions:
                0 {key}
                1 
              keys:
                0 key (type: string)
                1 key (type: string)

  Stage: Stage-1
    Map Reduce
      Map Operator Tree:
          TableScan
            alias: yy
            Statistics: Num rows: 1 Data size: 216 Basic stats: COMPLETE Column stats: NONE
            Reduce Output Operator
              key expressions: key (type: string)
              sort order: +
              Map-reduce partition columns: key (type: string)
              Statistics: Num rows: 1 Data size: 216 Basic stats: COMPLETE Column stats: NONE
              value expressions: key (type: string), value (type: string)
          TableScan
            alias: x
            Statistics: Num rows: 58 Data size: 5812 Basic stats: COMPLETE Column stats: NONE
            Map Join Operator
              condition map:
                   Inner Join 0 to 1
              condition expressions:
                0 {key}
                1 
              keys:
                0 key (type: string)
                1 key (type: string)
              outputColumnNames: _col0
              Statistics: Num rows: 63 Data size: 6393 Basic stats: COMPLETE Column stats: NONE
              Select Operator
                expressions: _col0 (type: string)
                outputColumnNames: _col0
                Statistics: Num rows: 63 Data size: 6393 Basic stats: COMPLETE Column stats: NONE
                Group By Operator
                  aggregations: count(1)
                  keys: _col0 (type: string)
                  mode: hash
                  outputColumnNames: _col0, _col1
                  Statistics: Num rows: 63 Data size: 6393 Basic stats: COMPLETE Column stats: NONE
                  Reduce Output Operator
                    key expressions: _col0 (type: string)
                    sort order: +
                    Map-reduce partition columns: _col0 (type: string)
                    Statistics: Num rows: 63 Data size: 6393 Basic stats: COMPLETE Column stats: NONE
                    value expressions: _col1 (type: bigint)
      Local Work:
        Map Reduce Local Work
      Reduce Operator Tree:
        Demux Operator
          Statistics: Num rows: 64 Data size: 6609 Basic stats: COMPLETE Column stats: NONE
          Group By Operator
            aggregations: count(VALUE._col0)
            keys: KEY._col0 (type: string)
            mode: mergepartial
            outputColumnNames: _col0, _col1
            Statistics: Num rows: 32 Data size: 3304 Basic stats: COMPLETE Column stats: NONE
            Select Operator
              expressions: _col0 (type: string), _col1 (type: bigint)
              outputColumnNames: _col0, _col1
              Statistics: Num rows: 32 Data size: 3304 Basic stats: COMPLETE Column stats: NONE
              Mux Operator
                Statistics: Num rows: 96 Data size: 9913 Basic stats: COMPLETE Column stats: NONE
                Join Operator
                  condition map:
                       Inner Join 0 to 1
                  condition expressions:
                    0 {VALUE._col0} {VALUE._col1}
                    1 {VALUE._col0} {VALUE._col1}
                  outputColumnNames: _col0, _col1, _col2, _col3
                  Statistics: Num rows: 0 Data size: 0 Basic stats: NONE Column stats: NONE
                  Select Operator
                    expressions: _col0 (type: string), _col1 (type: bigint), _col2 (type: string), _col3 (type: string)
                    outputColumnNames: _col0, _col1, _col2, _col3
                    Statistics: Num rows: 0 Data size: 0 Basic stats: NONE Column stats: NONE
                    File Output Operator
                      compressed: false
                      table:
                          input format: org.apache.hadoop.mapred.SequenceFileInputFormat
                          output format: org.apache.hadoop.hive.ql.io.HiveSequenceFileOutputFormat
                          serde: org.apache.hadoop.hive.serde2.lazybinary.LazyBinarySerDe
          Mux Operator
            Statistics: Num rows: 96 Data size: 9913 Basic stats: COMPLETE Column stats: NONE
            Join Operator
              condition map:
                   Inner Join 0 to 1
              condition expressions:
                0 {VALUE._col0} {VALUE._col1}
                1 {VALUE._col0} {VALUE._col1}
              outputColumnNames: _col0, _col1, _col2, _col3
              Statistics: Num rows: 0 Data size: 0 Basic stats: NONE Column stats: NONE
              Select Operator
                expressions: _col0 (type: string), _col1 (type: bigint), _col2 (type: string), _col3 (type: string)
                outputColumnNames: _col0, _col1, _col2, _col3
                Statistics: Num rows: 0 Data size: 0 Basic stats: NONE Column stats: NONE
                File Output Operator
                  compressed: false
                  table:
                      input format: org.apache.hadoop.mapred.SequenceFileInputFormat
                      output format: org.apache.hadoop.hive.ql.io.HiveSequenceFileOutputFormat
                      serde: org.apache.hadoop.hive.serde2.lazybinary.LazyBinarySerDe

  Stage: Stage-2
    Map Reduce
      Map Operator Tree:
          TableScan
            Reduce Output Operator
              key expressions: _col0 (type: string), _col1 (type: bigint), _col2 (type: string), _col3 (type: string)
              sort order: ++++
              Statistics: Num rows: 0 Data size: 0 Basic stats: NONE Column stats: NONE
              value expressions: _col0 (type: string), _col1 (type: bigint), _col2 (type: string), _col3 (type: string)
      Reduce Operator Tree:
        Extract
          Statistics: Num rows: 0 Data size: 0 Basic stats: NONE Column stats: NONE
          File Output Operator
            compressed: false
            Statistics: Num rows: 0 Data size: 0 Basic stats: NONE Column stats: NONE
            table:
                input format: org.apache.hadoop.mapred.TextInputFormat
                output format: org.apache.hadoop.hive.ql.io.HiveIgnoreKeyTextOutputFormat
                serde: org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe

  Stage: Stage-0
    Fetch Operator
      limit: -1

PREHOOK: query: SELECT xx.key, xx.cnt, yy.key, yy.value
FROM (SELECT x.key AS key, count(1) AS cnt
      FROM src x JOIN src1 y ON (x.key = y.key)
      GROUP BY x.key) xx
JOIN src1 yy
ON xx.key=yy.key ORDER BY xx.key, xx.cnt, yy.key, yy.value
PREHOOK: type: QUERY
PREHOOK: Input: default@src
PREHOOK: Input: default@src1
#### A masked pattern was here ####
POSTHOOK: query: SELECT xx.key, xx.cnt, yy.key, yy.value
FROM (SELECT x.key AS key, count(1) AS cnt
      FROM src x JOIN src1 y ON (x.key = y.key)
      GROUP BY x.key) xx
JOIN src1 yy
ON xx.key=yy.key ORDER BY xx.key, xx.cnt, yy.key, yy.value
POSTHOOK: type: QUERY
POSTHOOK: Input: default@src
POSTHOOK: Input: default@src1
#### A masked pattern was here ####
128	3	128	
146	2	146	val_146
150	1	150	val_150
213	2	213	val_213
224	2	224	
238	2	238	val_238
255	2	255	val_255
273	3	273	val_273
278	2	278	val_278
311	3	311	val_311
369	3	369	
401	5	401	val_401
406	4	406	val_406
66	1	66	val_66
98	2	98	val_98
