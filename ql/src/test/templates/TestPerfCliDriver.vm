/**
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package org.apache.hadoop.hive.cli;

import junit.framework.Test;
import junit.framework.TestCase;
import junit.framework.TestSuite;

import java.io.*;
import java.util.*;
import java.nio.*;

import org.apache.hadoop.hive.conf.HiveConf;
import org.apache.hadoop.hive.conf.HiveConf.ConfVars;

import org.apache.hadoop.hive.ql.QTestUtil;
import org.apache.hadoop.hive.ql.QTestUtil.MiniClusterType;
import org.apache.hadoop.hive.ql.session.SessionState;

/**
 This is the TestPerformance Cli Driver for integrating performance regression tests
 as part of the Hive Unit tests. 
 Currently this includes support for :
 1. Running explain plans for TPCDS workload (non-partitioned dataset)  on 30TB scaleset.
 TODO :
 1. Support for partitioned data set
 2. Use HBase Metastore instead of Derby 

This suite differs from TestCliDriver w.r.t the fact that we modify the underlying metastore
database to reflect the dataset before running the queries.
*/
public class $className extends TestCase {

  private static final String HIVE_ROOT = QTestUtil.ensurePathEndsInSlash(System.getProperty("hive.root"));
  private static QTestUtil qt;

  public static class TestPerfCliDriverAddTestFromQFiles implements QTestUtil.SuiteAddTestFunctor {
    public void addTestToSuite(TestSuite suite, Object setup, String tName) {
      suite.addTest(new $className("testPerfCliDriver_"+tName));
    }
  }

  static {
    System.setProperty("datanucleus.schema.autoCreateAll", "true");
    System.setProperty("hive.metastore.schema.verification", "false");
    MiniClusterType miniMR = MiniClusterType.valueForString("$clusterMode");
    String hiveConfDir = "$hiveConfDir";
    String initScript = "$initScript";
    String cleanupScript = "$cleanupScript";
    try {
      String hadoopVer = "$hadoopVersion";
      if (!hiveConfDir.isEmpty()) {
        hiveConfDir = HIVE_ROOT + hiveConfDir;
      }
      qt = new QTestUtil((HIVE_ROOT + "$resultsDir"), (HIVE_ROOT + "$logDir"), miniMR,
      hiveConfDir, hadoopVer, initScript, cleanupScript, false, false);

      // do a one time initialization
      qt.cleanUp();
      qt.createSources();
      // Manually modify the underlying metastore db to reflect statistics corresponding to
      // the 30TB TPCDS scale set. This way the optimizer will generate plans for a 30 TB set.
      QTestUtil.setupMetaStoreTableColumnStatsFor30TBTPCDSWorkload(qt.getConf());
    } catch (Exception e) {
      System.err.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.err.flush();
      fail("Unexpected exception in static initialization: "+e.getMessage());
    }
  }

  public $className(String name) {
    super(name);
  }

  /**
   * Dummy last test. This is only meant to shutdown qt
   */
  public void testPerfCliDriver_shutdown() {
    System.err.println ("Cleaning up " + "$className");
  }

  @Override
  protected void tearDown() {
    try {
      qt.clearPostTestEffects();
      if (getName().equals("testPerfCliDriver_shutdown"))
        qt.shutdown();
    }
    catch (Exception e) {
      System.err.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.err.flush();
      fail("Unexpected exception in tearDown");
    }
  }

  public static Test suite() {
    Set<String> qFilesToExecute = new HashSet<String>();
    String qFiles = System.getProperty("qfile", "").trim();
    if(!qFiles.isEmpty()) {
      for(String qFile : qFiles.split(",")) {
        qFile = qFile.trim();
        if(!qFile.isEmpty()) {
          qFilesToExecute.add(qFile);
        }
      }
    }

    TestSuite suite = new TestSuite();

    QTestUtil.addTestsToSuiteFromQfileNames("$qFileNamesFile", qFilesToExecute,
      suite, null, new TestPerfCliDriverAddTestFromQFiles());
    suite.addTest(new $className("testPerfCliDriver_shutdown"));
    return suite;
  }

  static String debugHint = "\nSee ./ql/target/tmp/log/hive.log or ./itests/qtest/target/tmp/log/hive.log, "
     + "or check ./ql/target/surefire-reports or ./itests/qtest/target/surefire-reports/ for specific test cases logs.";

#foreach ($qf in $qfiles)
  #set ($fname = $qf.getName())
  #set ($eidx = $fname.indexOf('.'))
  #set ($tname = $fname.substring(0, $eidx))
  #set ($fpath = $qfilesMap.get($fname))
  public void testPerfCliDriver_$tname() throws Exception {
    runTest("$tname", "$fname", (HIVE_ROOT + "$fpath"));
  }

#end

  private void runTest(String tname, String fname, String fpath) throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.err.println("Begin query: " + fname);

      qt.addFile(fpath);

      if (qt.shouldBeSkipped(fname)) {
        return;
      }

      qt.cliInit(fname, false);

      int ecode = qt.executeClient(fname);
      if (ecode != 0) {
        qt.failed(ecode, fname, debugHint);
      }
      ecode = qt.checkCliDriverResults(fname);
      if (ecode != 0) {
        qt.failedDiff(ecode, fname, debugHint);
      }
    }
    catch (Throwable e) {
      qt.failed(e, fname, debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.err.println("Done query: " + fname + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }
}
