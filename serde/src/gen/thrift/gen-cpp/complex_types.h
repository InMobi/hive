/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef complex_TYPES_H
#define complex_TYPES_H

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>





typedef struct _IntString__isset {
  _IntString__isset() : myint(false), myString(false), underscore_int(false) {}
  bool myint;
  bool myString;
  bool underscore_int;
} _IntString__isset;

class IntString {
 public:

  static const char* ascii_fingerprint; // = "52C6DAB6CF51AF617111F6D3964C6503";
  static const uint8_t binary_fingerprint[16]; // = {0x52,0xC6,0xDA,0xB6,0xCF,0x51,0xAF,0x61,0x71,0x11,0xF6,0xD3,0x96,0x4C,0x65,0x03};

  IntString() : myint(0), myString(), underscore_int(0) {
  }

  virtual ~IntString() throw() {}

  int32_t myint;
  std::string myString;
  int32_t underscore_int;

  _IntString__isset __isset;

  void __set_myint(const int32_t val) {
    myint = val;
  }

  void __set_myString(const std::string& val) {
    myString = val;
  }

  void __set_underscore_int(const int32_t val) {
    underscore_int = val;
  }

  bool operator == (const IntString & rhs) const
  {
    if (!(myint == rhs.myint))
      return false;
    if (!(myString == rhs.myString))
      return false;
    if (!(underscore_int == rhs.underscore_int))
      return false;
    return true;
  }
  bool operator != (const IntString &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const IntString & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(IntString &a, IntString &b);

typedef struct _Complex__isset {
  _Complex__isset() : aint(false), aString(false), lint(false), lString(false), lintString(false), mStringString(false) {}
  bool aint;
  bool aString;
  bool lint;
  bool lString;
  bool lintString;
  bool mStringString;
} _Complex__isset;

class Complex {
 public:

  static const char* ascii_fingerprint; // = "B6556501F2F746F0BF83D55B0A9824DE";
  static const uint8_t binary_fingerprint[16]; // = {0xB6,0x55,0x65,0x01,0xF2,0xF7,0x46,0xF0,0xBF,0x83,0xD5,0x5B,0x0A,0x98,0x24,0xDE};

  Complex() : aint(0), aString() {
  }

  virtual ~Complex() throw() {}

  int32_t aint;
  std::string aString;
  std::vector<int32_t>  lint;
  std::vector<std::string>  lString;
  std::vector<IntString>  lintString;
  std::map<std::string, std::string>  mStringString;

  _Complex__isset __isset;

  void __set_aint(const int32_t val) {
    aint = val;
  }

  void __set_aString(const std::string& val) {
    aString = val;
  }

  void __set_lint(const std::vector<int32_t> & val) {
    lint = val;
  }

  void __set_lString(const std::vector<std::string> & val) {
    lString = val;
  }

  void __set_lintString(const std::vector<IntString> & val) {
    lintString = val;
  }

  void __set_mStringString(const std::map<std::string, std::string> & val) {
    mStringString = val;
  }

  bool operator == (const Complex & rhs) const
  {
    if (!(aint == rhs.aint))
      return false;
    if (!(aString == rhs.aString))
      return false;
    if (!(lint == rhs.lint))
      return false;
    if (!(lString == rhs.lString))
      return false;
    if (!(lintString == rhs.lintString))
      return false;
    if (!(mStringString == rhs.mStringString))
      return false;
    return true;
  }
  bool operator != (const Complex &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Complex & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(Complex &a, Complex &b);



#endif
