/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#include "complex_types.h"

#include <algorithm>



const char* IntString::ascii_fingerprint = "52C6DAB6CF51AF617111F6D3964C6503";
const uint8_t IntString::binary_fingerprint[16] = {0x52,0xC6,0xDA,0xB6,0xCF,0x51,0xAF,0x61,0x71,0x11,0xF6,0xD3,0x96,0x4C,0x65,0x03};

uint32_t IntString::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->myint);
          this->__isset.myint = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->myString);
          this->__isset.myString = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->underscore_int);
          this->__isset.underscore_int = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t IntString::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("IntString");

  xfer += oprot->writeFieldBegin("myint", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->myint);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("myString", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->myString);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("underscore_int", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32(this->underscore_int);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(IntString &a, IntString &b) {
  using ::std::swap;
  swap(a.myint, b.myint);
  swap(a.myString, b.myString);
  swap(a.underscore_int, b.underscore_int);
  swap(a.__isset, b.__isset);
}

const char* Complex::ascii_fingerprint = "B6556501F2F746F0BF83D55B0A9824DE";
const uint8_t Complex::binary_fingerprint[16] = {0xB6,0x55,0x65,0x01,0xF2,0xF7,0x46,0xF0,0xBF,0x83,0xD5,0x5B,0x0A,0x98,0x24,0xDE};

uint32_t Complex::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->aint);
          this->__isset.aint = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->aString);
          this->__isset.aString = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->lint.clear();
            uint32_t _size0;
            ::apache::thrift::protocol::TType _etype3;
            xfer += iprot->readListBegin(_etype3, _size0);
            this->lint.resize(_size0);
            uint32_t _i4;
            for (_i4 = 0; _i4 < _size0; ++_i4)
            {
              xfer += iprot->readI32(this->lint[_i4]);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.lint = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->lString.clear();
            uint32_t _size5;
            ::apache::thrift::protocol::TType _etype8;
            xfer += iprot->readListBegin(_etype8, _size5);
            this->lString.resize(_size5);
            uint32_t _i9;
            for (_i9 = 0; _i9 < _size5; ++_i9)
            {
              xfer += iprot->readString(this->lString[_i9]);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.lString = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->lintString.clear();
            uint32_t _size10;
            ::apache::thrift::protocol::TType _etype13;
            xfer += iprot->readListBegin(_etype13, _size10);
            this->lintString.resize(_size10);
            uint32_t _i14;
            for (_i14 = 0; _i14 < _size10; ++_i14)
            {
              xfer += this->lintString[_i14].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.lintString = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_MAP) {
          {
            this->mStringString.clear();
            uint32_t _size15;
            ::apache::thrift::protocol::TType _ktype16;
            ::apache::thrift::protocol::TType _vtype17;
            xfer += iprot->readMapBegin(_ktype16, _vtype17, _size15);
            uint32_t _i19;
            for (_i19 = 0; _i19 < _size15; ++_i19)
            {
              std::string _key20;
              xfer += iprot->readString(_key20);
              std::string& _val21 = this->mStringString[_key20];
              xfer += iprot->readString(_val21);
            }
            xfer += iprot->readMapEnd();
          }
          this->__isset.mStringString = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t Complex::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("Complex");

  xfer += oprot->writeFieldBegin("aint", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->aint);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("aString", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->aString);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("lint", ::apache::thrift::protocol::T_LIST, 3);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_I32, static_cast<uint32_t>(this->lint.size()));
    std::vector<int32_t> ::const_iterator _iter22;
    for (_iter22 = this->lint.begin(); _iter22 != this->lint.end(); ++_iter22)
    {
      xfer += oprot->writeI32((*_iter22));
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("lString", ::apache::thrift::protocol::T_LIST, 4);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRING, static_cast<uint32_t>(this->lString.size()));
    std::vector<std::string> ::const_iterator _iter23;
    for (_iter23 = this->lString.begin(); _iter23 != this->lString.end(); ++_iter23)
    {
      xfer += oprot->writeString((*_iter23));
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("lintString", ::apache::thrift::protocol::T_LIST, 5);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->lintString.size()));
    std::vector<IntString> ::const_iterator _iter24;
    for (_iter24 = this->lintString.begin(); _iter24 != this->lintString.end(); ++_iter24)
    {
      xfer += (*_iter24).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("mStringString", ::apache::thrift::protocol::T_MAP, 6);
  {
    xfer += oprot->writeMapBegin(::apache::thrift::protocol::T_STRING, ::apache::thrift::protocol::T_STRING, static_cast<uint32_t>(this->mStringString.size()));
    std::map<std::string, std::string> ::const_iterator _iter25;
    for (_iter25 = this->mStringString.begin(); _iter25 != this->mStringString.end(); ++_iter25)
    {
      xfer += oprot->writeString(_iter25->first);
      xfer += oprot->writeString(_iter25->second);
    }
    xfer += oprot->writeMapEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(Complex &a, Complex &b) {
  using ::std::swap;
  swap(a.aint, b.aint);
  swap(a.aString, b.aString);
  swap(a.lint, b.lint);
  swap(a.lString, b.lString);
  swap(a.lintString, b.lintString);
  swap(a.mStringString, b.mStringString);
  swap(a.__isset, b.__isset);
}


